{"ast":null,"code":"var _jsxFileName = \"/home/noir/projects/diplom/front/src/components/AdminPanel.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { fetchStructureData, fetchSingleTableData } from \"../api/fetch_records.js\"; // Функции получения данных\nimport { sendSingleData, sendUpdateData, sendDeleteData } from \"../api/add_records.js\"; // Функция для отправки данных\nimport Modal from \"./Modal\"; // Компонент модального окна\nimport axios from \"axios\";\nimport { translate } from \"../utils/translations.js\";\nimport { useNotification } from \"./NotificationContext.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminPanel = () => {\n  _s();\n  // Основные состояния\n  const [tableList, setTableList] = useState([]);\n  const [selectedTable, setSelectedTable] = useState(null);\n  const [tableRecords, setTableRecords] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [formData, setFormData] = useState({});\n  const {\n    showSuccess,\n    showEdit,\n    showError\n  } = useNotification(); // глобальные уведомления\n  // Дополнительное состояние для хранения схемы выбранной модели\n  const [modelSchema, setModelSchema] = useState(null);\n  // Состояние для режима редактирования (false - добавление, true - редактирование)\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Получение списка таблиц при монтировании компонента\n  useEffect(() => {\n    const getTableList = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetchStructureData(\"allModels\");\n        console.log(\"Полученные данные:\", response.data);\n        // Преобразуем данные в нужный формат\n        const tableListData = response.data.map(([displayName, modelName]) => ({\n          [displayName]: modelName\n        }));\n        console.log(\"Преобразованные данные:\", tableListData);\n        setTableList(tableListData);\n      } catch (error) {\n        console.error(\"Ошибка загрузки списка таблиц:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getTableList();\n  }, []);\n\n  // При выборе таблицы получаем её записи и схему модели (если есть)\n  const handleSelectTable = async modelName => {\n    setSelectedTable(modelName);\n    setIsLoading(true);\n    try {\n      const records = await fetchSingleTableData(modelName);\n      const formattedRecords = records.map(record => {\n        const formattedRecord = {\n          ...record\n        };\n        for (const key in formattedRecord) {\n          if (key.toLowerCase().includes('date')) {\n            try {\n              const date = new Date(formattedRecord[key]);\n              if (!isNaN(date)) {\n                formattedRecord[key] = date.toLocaleDateString('ru-RU', {\n                  year: 'numeric',\n                  month: '2-digit',\n                  day: '2-digit'\n                });\n              }\n            } catch (error) {\n              console.error(`Ошибка форматирования даты для поля ${key}:`, error);\n            }\n          }\n          if (key.toLowerCase().includes('time')) {\n            try {\n              const time = new Date(formattedRecord[key]);\n              if (!isNaN(time)) {\n                formattedRecord[key] = time.toLocaleTimeString('ru-RU', {\n                  hour: '2-digit',\n                  minute: '2-digit'\n                });\n              }\n            } catch (error) {\n              console.error(`Ошибка форматирования времени для поля ${key}:`, error);\n            }\n          }\n        }\n        return formattedRecord;\n      });\n      setTableRecords(formattedRecords);\n      // Здесь можно сделать дополнительный запрос для получения схемы модели, если API предоставляет её\n      // Пример: const schema = await fetchModelSchema(modelName);\n      // Для демонстрации предполагаем, что схема содержит массив объектов { field: \"имя_поля\", type: \"тип\", foreignKey: true/false, options: [...] }\n      // const schema = await fetchModelSchema(modelName); TODO\n      const schema = await fetchStructureData(\"schema_\" + modelName);\n      setModelSchema(schema);\n    } catch (error) {\n      console.error(\"Ошибка загрузки данных для таблицы\", modelName, error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Функция для вызова модального окна в режиме добавления\n  const handleAddButton = () => {\n    setFormData({});\n    setIsEditMode(false);\n    setModalVisible(true);\n  };\n\n  // Функция для вызова модального окна в режиме редактирования\n  const handleEditButton = record => {\n    setFormData(record);\n    setIsEditMode(true);\n    setModalVisible(true);\n  };\n  const [alertVisible, setAlertVisible] = useState(false);\n  const showAlert = () => {\n    setAlertVisible(true);\n    setTimeout(() => {\n      setAlertVisible(false);\n    }, 10000);\n  };\n\n  // Функция для закрытия модального окна\n  const handleCloseModal = () => {\n    setModalVisible(false);\n  };\n\n  // Функция для удаления записи\n  const handleDeleteButton = async record => {\n    try {\n      await sendDeleteData(selectedTable, record.id);\n      // После успешного удаления обновляем список записей\n      const updatedRecords = tableRecords.filter(r => r.id !== record.id);\n      setTableRecords(updatedRecords);\n      showAlert();\n      showSuccess();\n    } catch (error) {\n      console.error(\"Ошибка при удалении записи:\", error);\n    }\n  };\n  const renderTable = () => {\n    if (isLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 27\n    }, this);\n    if (!selectedTable || tableRecords.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u041D\\u0435\\u0442 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 \\u0434\\u043B\\u044F \\u043E\\u0442\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u044F.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 14\n    }, this);\n\n    // Извлекаем ключи столбцов из первого элемента данных\n    const columns = Object.keys(tableRecords[0]);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"data-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [columns.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: column\n            }, column, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0414\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u044F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tableRecords.map(record => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [columns.map(column => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: record[column]\n            }, column, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 19\n            }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleEditButton(record),\n                children: \"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleDeleteButton(record),\n                children: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this)]\n          }, record.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Обработчик изменений в форме. Здесь мы обновляем состояние formData\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Обработчик сабмита формы. Здесь динамически собираем объект данных, исходя из схемы\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n    // Инициализация объекта данных.\n    const dataToSend = {\n      ...formData,\n      created_by: \"admin\",\n      // Автоподстановка\n      created_at: isEditMode ? undefined : new Date().toISOString() // Для новых записей\n    };\n    // Удаляем технические поля для редактирования\n    if (isEditMode) {\n      delete dataToSend.created_by;\n      delete dataToSend.created_at;\n      dataToSend.updated_by = \"admin\";\n      dataToSend.updated_at = new Date().toISOString();\n    }\n    if (modelSchema && modelSchema.data) {\n      modelSchema.data.forEach(item => {\n        const fieldName = item.field;\n        const fieldValue = dataToSend[fieldName];\n        if (item.type === \"INTEGER\") {\n          dataToSend[fieldName] = parseInt(fieldValue, 10);\n        } else if (item.type === \"BOOLEAN\") {\n          dataToSend[fieldName] = fieldValue === \"true\";\n        } else if (item.type === \"FLOAT\") {\n          dataToSend[fieldName] = parseFloat(fieldValue);\n        } else if (item.type === \"DATE\") {\n          // Преобразование в строку\n          dataToSend[fieldName] = new Date(fieldValue).toISOString();\n        }\n      });\n    }\n    try {\n      if (!isEditMode) {\n        // Отправка данных на сервер для добавления новой записи\n        await sendSingleData(selectedTable, dataToSend);\n        showSuccess();\n      } else {\n        // Отправка данных на сервер для обновления существующей записи\n        await sendUpdateData(selectedTable, dataToSend);\n        showEdit();\n      }\n      // Закрываем модальное окно\n      handleCloseModal();\n      showAlert();\n\n      // После успешной отправки данных обновляем список записей\n      const updatedRecords = await fetchSingleTableData(selectedTable);\n      setTableRecords(updatedRecords);\n    } catch (error) {\n      setError(error.message);\n      console.error(\"Ошибка при отправке данных (создание/редактирование):\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u041F\\u0430\\u043D\\u0435\\u043B\\u044C \\u0430\\u0434\\u043C\\u0438\\u043D\\u0438\\u0441\\u0442\\u0440\\u0430\\u0442\\u043E\\u0440\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selectors\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0442\\u0430\\u0431\\u043B\\u0438\\u0446\\u0443:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => handleSelectTable(e.target.value),\n          value: selectedTable || \"\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0442\\u0430\\u0431\\u043B\\u0438\\u0446\\u0443\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this), tableList && tableList.map((table, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: Object.values(table)[0],\n            children: Object.keys(table)[0]\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddButton,\n      children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0437\\u0430\\u043F\\u0438\\u0441\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), renderTable(), modalVisible && /*#__PURE__*/_jsxDEV(Modal, {\n      closeModal: handleCloseModal,\n      isEditMode: isEditMode,\n      formData: formData,\n      modelSchema: modelSchema,\n      handleInputChange: handleInputChange,\n      handleFormSubmit: handleFormSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminPanel, \"+sB1cd0n2L5pBRcT79VCyjJqJzY=\", false, function () {\n  return [useNotification];\n});\n_c = AdminPanel;\nexport default AdminPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminPanel\");","map":{"version":3,"names":["React","useEffect","useState","fetchStructureData","fetchSingleTableData","sendSingleData","sendUpdateData","sendDeleteData","Modal","axios","translate","useNotification","jsxDEV","_jsxDEV","AdminPanel","_s","tableList","setTableList","selectedTable","setSelectedTable","tableRecords","setTableRecords","isLoading","setIsLoading","modalVisible","setModalVisible","formData","setFormData","showSuccess","showEdit","showError","modelSchema","setModelSchema","isEditMode","setIsEditMode","error","setError","getTableList","response","console","log","data","tableListData","map","displayName","modelName","handleSelectTable","records","formattedRecords","record","formattedRecord","key","toLowerCase","includes","date","Date","isNaN","toLocaleDateString","year","month","day","time","toLocaleTimeString","hour","minute","schema","handleAddButton","handleEditButton","alertVisible","setAlertVisible","showAlert","setTimeout","handleCloseModal","handleDeleteButton","id","updatedRecords","filter","r","renderTable","children","fileName","_jsxFileName","lineNumber","columnNumber","length","columns","Object","keys","className","column","onClick","handleInputChange","e","name","value","target","prev","handleFormSubmit","preventDefault","dataToSend","created_by","created_at","undefined","toISOString","updated_by","updated_at","forEach","item","fieldName","field","fieldValue","type","parseInt","parseFloat","message","onChange","table","index","values","closeModal","_c","$RefreshReg$"],"sources":["/home/noir/projects/diplom/front/src/components/AdminPanel.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  fetchStructureData,\n  fetchSingleTableData,\n} from \"../api/fetch_records.js\"; // Функции получения данных\nimport {\n  sendSingleData,\n  sendUpdateData,\n  sendDeleteData,\n} from \"../api/add_records.js\"; // Функция для отправки данных\nimport Modal from \"./Modal\"; // Компонент модального окна\nimport axios from \"axios\";\nimport {translate} from \"../utils/translations.js\"\nimport { useNotification } from \"./NotificationContext.js\";\n\nconst AdminPanel = () => {\n  // Основные состояния\n  const [tableList, setTableList] = useState([]);\n  const [selectedTable, setSelectedTable] = useState(null);\n  const [tableRecords, setTableRecords] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [formData, setFormData] = useState({});\n  const { showSuccess, showEdit, showError } = useNotification(); // глобальные уведомления\n  // Дополнительное состояние для хранения схемы выбранной модели\n  const [modelSchema, setModelSchema] = useState(null);\n  // Состояние для режима редактирования (false - добавление, true - редактирование)\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Получение списка таблиц при монтировании компонента\n  useEffect(() => {\n    const getTableList = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetchStructureData(\"allModels\");\n        console.log(\"Полученные данные:\", response.data);\n        // Преобразуем данные в нужный формат\n        const tableListData = response.data.map(([displayName, modelName]) => ({\n          [displayName]: modelName,\n        }));\n        console.log(\"Преобразованные данные:\", tableListData);\n        setTableList(tableListData);\n      } catch (error) {\n        console.error(\"Ошибка загрузки списка таблиц:\", error);\n      } finally {\n        setIsLoading(false);\n    }\n  };\n    getTableList();\n  }, []);\n\n  // При выборе таблицы получаем её записи и схему модели (если есть)\n  const handleSelectTable = async (modelName) => {\n    setSelectedTable(modelName);\n    setIsLoading(true);\n    try {\n      const records = await fetchSingleTableData(modelName);\n      const formattedRecords = records.map(record => {\n        const formattedRecord = { ...record };\n\n        for (const key in formattedRecord) {\n          if (key.toLowerCase().includes('date')) {\n            try {\n              const date = new Date(formattedRecord[key]);\n              if (!isNaN(date)) {\n                formattedRecord[key] = date.toLocaleDateString('ru-RU', {\n                  year: 'numeric',\n                  month: '2-digit',\n                  day: '2-digit',\n                });\n              }\n            } catch (error) {\n              console.error(`Ошибка форматирования даты для поля ${key}:`, error);\n            }\n          }\n          if (key.toLowerCase().includes('time')) {\n                try {\n                    const time = new Date(formattedRecord[key]);\n                    if (!isNaN(time)) {\n                        formattedRecord[key] = time.toLocaleTimeString('ru-RU', {\n                            hour: '2-digit',\n                            minute: '2-digit',\n                        });\n                    }\n                } catch (error) {\n                    console.error(`Ошибка форматирования времени для поля ${key}:`, error);\n                }\n            }\n        }\n        return formattedRecord;\n      });\n      setTableRecords(formattedRecords);\n      // Здесь можно сделать дополнительный запрос для получения схемы модели, если API предоставляет её\n      // Пример: const schema = await fetchModelSchema(modelName);\n      // Для демонстрации предполагаем, что схема содержит массив объектов { field: \"имя_поля\", type: \"тип\", foreignKey: true/false, options: [...] }\n      // const schema = await fetchModelSchema(modelName); TODO\n      const schema = await fetchStructureData(\"schema_\" + modelName);\n      setModelSchema(schema);\n    } catch (error) {\n      console.error(\"Ошибка загрузки данных для таблицы\", modelName, error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Функция для вызова модального окна в режиме добавления\n  const handleAddButton = () => {\n    setFormData({});\n    setIsEditMode(false);\n    setModalVisible(true);\n  };\n\n  // Функция для вызова модального окна в режиме редактирования\n  const handleEditButton = (record) => {\n    setFormData(record);\n    setIsEditMode(true);\n    setModalVisible(true);\n  };\n\n  const [alertVisible, setAlertVisible] = useState(false);\n\n  const showAlert = () => {\n    setAlertVisible(true);\n    setTimeout(() => {\n      setAlertVisible(false);\n    }, 10000);\n  };\n\n  // Функция для закрытия модального окна\n  const handleCloseModal = () => {\n    setModalVisible(false);\n  };\n\n  // Функция для удаления записи\n  const handleDeleteButton = async (record) => {\n    try {\n      await sendDeleteData(selectedTable, record.id);\n      // После успешного удаления обновляем список записей\n      const updatedRecords = tableRecords.filter((r) => r.id !== record.id);\n      setTableRecords(updatedRecords);\n      showAlert();\n      showSuccess();\n    } catch (error) {\n      console.error(\"Ошибка при удалении записи:\", error);\n    }\n  };\n\n  const renderTable = () => {\n    if (isLoading) return <p>Загрузка...</p>;\n    if (!selectedTable || tableRecords.length === 0)\n      return <p>Нет данных для отображения.</p>;\n\n    // Извлекаем ключи столбцов из первого элемента данных\n    const columns = Object.keys(tableRecords[0]);\n\n    return (\n      <div className=\"table-container\">\n        <table className=\"data-table\">\n          <thead>\n            <tr>\n              {columns.map((column) => (\n                <th key={column}>{column}</th>\n              ))}\n              <th>Действия</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tableRecords.map((record) => (\n              <tr key={record.id}>\n                {columns.map((column) => (\n                  <td key={column}>{record[column]}</td>\n                ))}\n                <td>\n                  <button onClick={() => handleEditButton(record)}>\n                    Редактировать\n                  </button>\n                  <button onClick={() => handleDeleteButton(record)}>\n                    Удалить\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  // Обработчик изменений в форме. Здесь мы обновляем состояние formData\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  // Обработчик сабмита формы. Здесь динамически собираем объект данных, исходя из схемы\n  const handleFormSubmit = async (e) => {\n\n    e.preventDefault();\n    // Инициализация объекта данных.\n    const dataToSend = {\n      ...formData,\n      created_by: \"admin\", // Автоподстановка\n      created_at: isEditMode ? undefined : new Date().toISOString(), // Для новых записей\n    };\n    // Удаляем технические поля для редактирования\n    if (isEditMode) {\n      delete dataToSend.created_by;\n      delete dataToSend.created_at;\n      dataToSend.updated_by = \"admin\";\n      dataToSend.updated_at = new Date().toISOString();\n    }\n\n    if (modelSchema && modelSchema.data) {\n      modelSchema.data.forEach((item) => {\n        const fieldName = item.field;\n        const fieldValue = dataToSend[fieldName];\n\n        if (item.type === \"INTEGER\") {\n          dataToSend[fieldName] = parseInt(fieldValue, 10);\n        } else if (item.type === \"BOOLEAN\") {\n          dataToSend[fieldName] = fieldValue === \"true\";\n        } else if (item.type === \"FLOAT\") {\n          dataToSend[fieldName] = parseFloat(fieldValue);\n        } else if (item.type === \"DATE\") {\n          // Преобразование в строку\n          dataToSend[fieldName] = new Date(fieldValue).toISOString();\n        }\n      });\n    }\n\n    try {\n      if (!isEditMode) {\n        // Отправка данных на сервер для добавления новой записи\n        await sendSingleData(selectedTable, dataToSend);\n        showSuccess();\n      } else {\n        // Отправка данных на сервер для обновления существующей записи\n        await sendUpdateData(selectedTable, dataToSend);\n        showEdit();\n      }\n      // Закрываем модальное окно\n      handleCloseModal();\n      showAlert();\n\n      // После успешной отправки данных обновляем список записей\n      const updatedRecords = await fetchSingleTableData(selectedTable);\n      setTableRecords(updatedRecords);\n    } catch (error) {\n      setError(error.message);\n      console.error(\n        \"Ошибка при отправке данных (создание/редактирование):\",\n        error\n      );\n    }\n  };\n\n  return (\n    <div className=\"admin-panel\">\n      <h2>Панель администратора</h2>\n      <div className=\"selectors\">\n        <label>\n          Выберите таблицу:\n          <select\n            onChange={(e) => handleSelectTable(e.target.value)}\n            value={selectedTable || \"\"}\n          >\n            <option value=\"\">Выберите таблицу</option>\n            {tableList &&\n              tableList.map((table, index) => (\n                <option key={index} value={Object.values(table)[0]}>\n                  {Object.keys(table)[0]}\n                </option>\n              ))}\n          </select>\n        </label>\n      </div>\n\n      <button onClick={handleAddButton}>Добавить запись</button>\n\n      {renderTable()}\n\n      {modalVisible && (\n        <Modal\n          closeModal={handleCloseModal}\n          isEditMode={isEditMode}\n          formData={formData}\n          modelSchema={modelSchema}\n          handleInputChange={handleInputChange}\n          handleFormSubmit={handleFormSubmit}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default AdminPanel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}