{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://127.0.0.1:5000/api';\n\n/*export const fetchRecords = async () => {\n  const response = await axios.get(`${API_BASE_URL}/records`);\n  return response.data.records;\n};\n\nexport const createRecord = async (data) => {\n  const response = await axios.post(`${API_BASE_URL}/records`, data);\n  return response.data;\n};*/\n\nconst fetchWaterObjects = async () => {\n  try {\n    var _userData$org;\n    // 1. Get organization ID\n    const userData = JSON.parse(localStorage.getItem(\"user\"));\n    const orgId = userData === null || userData === void 0 ? void 0 : (_userData$org = userData.org) === null || _userData$org === void 0 ? void 0 : _userData$org.id;\n    if (!orgId) throw new Error(\"Organization ID not found in user data\");\n\n    // 2. Fetch all water points\n    const allWaterPoints = await fetchSingleTableData('water_point');\n\n    // 3. Filter water points by organization\n    const orgWaterPoints = allWaterPoints.filter(point => {\n      var _point$organisation_i;\n      return ((_point$organisation_i = point.organisation_id) === null || _point$organisation_i === void 0 ? void 0 : _point$organisation_i.toString()) === orgId.toString();\n    });\n\n    // 4. Collect water_body IDs\n    const waterBodyIds = [...new Set(orgWaterPoints.map(p => p.water_body_id))].filter(id => id !== undefined && id !== null);\n    if (waterBodyIds.length === 0) return [];\n\n    // 5. Fetch filtered water objects\n    const response = await fetchStructureData('water_object_ref', {\n      field: 'id',\n      operator: 'in',\n      value: waterBodyIds\n    });\n    return response.data || [];\n  } catch (error) {\n    console.error(\"Ошибка при загрузке водных объектов:\", error);\n    throw error; // Пробрасываем ошибку дальше\n  }\n};\n\n// export default fetchWaterObjects;\n\nconst sendQuarterData = async (waterObjectCode, quarter, data) => {\n  const token = localStorage.getItem('jwtToken');\n  try {\n    let send_form = 'send_quarter';\n    console.log(waterObjectCode);\n    const response = await axios.post(`${API_BASE_URL}/send_form`, {\n      waterObjectCode,\n      quarter,\n      data,\n      send_form\n    }, {\n      headers: {\n        'tokenJWTAuthorization': token // Передаем токен в заголовке\n      },\n      withCredentials: true\n    });\n    return response.data; // Возвращаем данные ответа\n  } catch (error) {\n    throw new Error(\"Ошибка при отправке данных: \" + error.message);\n  }\n};\nexport { sendQuarterData, fetchWaterObjects };","map":{"version":3,"names":["axios","API_BASE_URL","fetchWaterObjects","_userData$org","userData","JSON","parse","localStorage","getItem","orgId","org","id","Error","allWaterPoints","fetchSingleTableData","orgWaterPoints","filter","point","_point$organisation_i","organisation_id","toString","waterBodyIds","Set","map","p","water_body_id","undefined","length","response","fetchStructureData","field","operator","value","data","error","console","sendQuarterData","waterObjectCode","quarter","token","send_form","log","post","headers","withCredentials","message"],"sources":["/home/noir/projects/diplom/front/src/api/records.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://127.0.0.1:5000/api';\n\n/*export const fetchRecords = async () => {\n  const response = await axios.get(`${API_BASE_URL}/records`);\n  return response.data.records;\n};\n\nexport const createRecord = async (data) => {\n  const response = await axios.post(`${API_BASE_URL}/records`, data);\n  return response.data;\n};*/\n\n\nconst fetchWaterObjects = async () => {\n  try {\n    // 1. Get organization ID\n    const userData = JSON.parse(localStorage.getItem(\"user\"));\n    const orgId = userData?.org?.id;\n    if (!orgId) throw new Error(\"Organization ID not found in user data\");\n\n    // 2. Fetch all water points\n    const allWaterPoints = await fetchSingleTableData('water_point');\n\n    // 3. Filter water points by organization\n    const orgWaterPoints = allWaterPoints.filter(\n      point => point.organisation_id?.toString() === orgId.toString()\n    );\n\n    // 4. Collect water_body IDs\n    const waterBodyIds = [...new Set(\n      orgWaterPoints.map(p => p.water_body_id)\n    )].filter(id => id !== undefined && id !== null);\n\n    if (waterBodyIds.length === 0) return [];\n\n    // 5. Fetch filtered water objects\n    const response = await fetchStructureData(\n      'water_object_ref',\n      {\n        field: 'id',\n        operator: 'in',\n        value: waterBodyIds\n      }\n    );\n\n    return response.data || [];\n\n\n  } catch (error) {\n    console.error(\"Ошибка при загрузке водных объектов:\", error);\n    throw error; // Пробрасываем ошибку дальше\n  }\n};\n\n// export default fetchWaterObjects;\n\nconst sendQuarterData = async (waterObjectCode, quarter, data) => {\n  const token = localStorage.getItem('jwtToken');\n\n\n  try {\n    let send_form = 'send_quarter';\n    console.log(waterObjectCode);\n    const response = await axios.post(`${API_BASE_URL}/send_form`, {\n      waterObjectCode,\n      quarter,\n      data,\n      send_form\n    }, {\n      headers: {\n        'tokenJWTAuthorization': token // Передаем токен в заголовке\n      },\n      withCredentials: true\n    });\n\n    return response.data; // Возвращаем данные ответа\n  } catch (error) {\n    throw new Error(\"Ошибка при отправке данных: \" + error.message);\n  }\n};\n\nexport {sendQuarterData, fetchWaterObjects};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IAAA,IAAAC,aAAA;IACF;IACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IACzD,MAAMC,KAAK,GAAGL,QAAQ,aAARA,QAAQ,wBAAAD,aAAA,GAARC,QAAQ,CAAEM,GAAG,cAAAP,aAAA,uBAAbA,aAAA,CAAeQ,EAAE;IAC/B,IAAI,CAACF,KAAK,EAAE,MAAM,IAAIG,KAAK,CAAC,wCAAwC,CAAC;;IAErE;IACA,MAAMC,cAAc,GAAG,MAAMC,oBAAoB,CAAC,aAAa,CAAC;;IAEhE;IACA,MAAMC,cAAc,GAAGF,cAAc,CAACG,MAAM,CAC1CC,KAAK;MAAA,IAAAC,qBAAA;MAAA,OAAI,EAAAA,qBAAA,GAAAD,KAAK,CAACE,eAAe,cAAAD,qBAAA,uBAArBA,qBAAA,CAAuBE,QAAQ,CAAC,CAAC,MAAKX,KAAK,CAACW,QAAQ,CAAC,CAAC;IAAA,CACjE,CAAC;;IAED;IACA,MAAMC,YAAY,GAAG,CAAC,GAAG,IAAIC,GAAG,CAC9BP,cAAc,CAACQ,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,aAAa,CACzC,CAAC,CAAC,CAACT,MAAM,CAACL,EAAE,IAAIA,EAAE,KAAKe,SAAS,IAAIf,EAAE,KAAK,IAAI,CAAC;IAEhD,IAAIU,YAAY,CAACM,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;;IAExC;IACA,MAAMC,QAAQ,GAAG,MAAMC,kBAAkB,CACvC,kBAAkB,EAClB;MACEC,KAAK,EAAE,IAAI;MACXC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAEX;IACT,CACF,CAAC;IAED,OAAOO,QAAQ,CAACK,IAAI,IAAI,EAAE;EAG5B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAED;;AAEA,MAAME,eAAe,GAAG,MAAAA,CAAOC,eAAe,EAAEC,OAAO,EAAEL,IAAI,KAAK;EAChE,MAAMM,KAAK,GAAGhC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAG9C,IAAI;IACF,IAAIgC,SAAS,GAAG,cAAc;IAC9BL,OAAO,CAACM,GAAG,CAACJ,eAAe,CAAC;IAC5B,MAAMT,QAAQ,GAAG,MAAM5B,KAAK,CAAC0C,IAAI,CAAC,GAAGzC,YAAY,YAAY,EAAE;MAC7DoC,eAAe;MACfC,OAAO;MACPL,IAAI;MACJO;IACF,CAAC,EAAE;MACDG,OAAO,EAAE;QACP,uBAAuB,EAAEJ,KAAK,CAAC;MACjC,CAAC;MACDK,eAAe,EAAE;IACnB,CAAC,CAAC;IAEF,OAAOhB,QAAQ,CAACK,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAItB,KAAK,CAAC,8BAA8B,GAAGsB,KAAK,CAACW,OAAO,CAAC;EACjE;AACF,CAAC;AAED,SAAQT,eAAe,EAAElC,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}