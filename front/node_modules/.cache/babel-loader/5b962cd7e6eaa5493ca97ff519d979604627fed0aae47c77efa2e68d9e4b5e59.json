{"ast":null,"code":"var _jsxFileName = \"/home/noir/projects/diplom/front/src/components/PaymentCalculationForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { fetchSingleTableData } from \"../api/fetch_records\";\nimport \"../css/Water.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PaymentCalculationForm = () => {\n  _s();\n  // ........... Фетчим ставки ..............\n\n  const [ratesData, setRatesData] = useState({}); // Состояние для хранения ставок из БД\n\n  useEffect(() => {\n    const fetchRates = async () => {\n      try {\n        const rates = await fetchSingleTableData(\"rates\");\n        const currentDate = new Date().toISOString().split(\"T\")[0];\n        console.log(\"Текущая дата - \", currentDate);\n        // Фильтруем ставки, выбирая последние актуальные перед текущей датой\n        const filteredRates = rates.reduce((acc, rate) => {\n          const rateDate = new Date(rate.start_date).toISOString().split(\"T\")[0];\n          console.log(\"Дата ставки - \", rateDate);\n          if (rateDate <= currentDate) {\n            if (!acc[rate.rate_type] || new Date(acc[rate.rate_type].start_date) < new Date(rate.start_date)) {\n              acc[rate.rate_type] = rate;\n            }\n          }\n          return acc;\n        }, {});\n        setRatesData(filteredRates);\n      } catch (error) {\n        console.error(\"Ошибка при получении ставок:\", error);\n      }\n    };\n    fetchRates();\n  }, []);\n  const updateRates = filteredRates => {\n    setRows(prevRows => {\n      console.log(\"[updateRates]:\", filteredRates);\n      const updatedRates = prevRows.rates.map(rate => {\n        var _filteredRates$POPULA, _filteredRates$POPULA2, _filteredRates$POPULA3, _filteredRates$POPULA4, _filteredRates$ORG, _filteredRates$ORG2, _filteredRates$ORG3, _filteredRates$ORG4;\n        if (rate.id === \"2.1\") return {\n          ...rate,\n          establishedVolume: ((_filteredRates$POPULA = filteredRates.POPULATION) === null || _filteredRates$POPULA === void 0 ? void 0 : _filteredRates$POPULA.value) || 0,\n          actualVolume: ((_filteredRates$POPULA2 = filteredRates.POPULATION) === null || _filteredRates$POPULA2 === void 0 ? void 0 : _filteredRates$POPULA2.value) || 0,\n          withinLimitsVolume: ((_filteredRates$POPULA3 = filteredRates.POPULATION) === null || _filteredRates$POPULA3 === void 0 ? void 0 : _filteredRates$POPULA3.value) || 0,\n          exceededVolume: ((_filteredRates$POPULA4 = filteredRates.POPULATION) === null || _filteredRates$POPULA4 === void 0 ? void 0 : _filteredRates$POPULA4.value) || 0\n        };\n        if (rate.id === \"2.2\") return {\n          ...rate,\n          establishedVolume: ((_filteredRates$ORG = filteredRates.ORG) === null || _filteredRates$ORG === void 0 ? void 0 : _filteredRates$ORG.value) || 0,\n          actualVolume: ((_filteredRates$ORG2 = filteredRates.ORG) === null || _filteredRates$ORG2 === void 0 ? void 0 : _filteredRates$ORG2.value) || 0,\n          withinLimitsVolume: ((_filteredRates$ORG3 = filteredRates.ORG) === null || _filteredRates$ORG3 === void 0 ? void 0 : _filteredRates$ORG3.value) || 0,\n          exceededVolume: ((_filteredRates$ORG4 = filteredRates.ORG) === null || _filteredRates$ORG4 === void 0 ? void 0 : _filteredRates$ORG4.value) || 0\n        };\n        return rate;\n      });\n      return {\n        ...prevRows,\n        rates: updatedRates\n      };\n    });\n  };\n  useEffect(() => {\n    if (Object.keys(ratesData).length > 0) {\n      updateRates(ratesData);\n    }\n  }, [ratesData]);\n\n  // .......................................\n\n  const initialRows = {\n    parameters: [{\n      id: \"1\",\n      indicator: \"Параметры водопользования\",\n      unit: \"тыс.м3\",\n      establishedVolume: \"\",\n      // заглушка – значение подгружается из БД\n      actualVolume: 0,\n      withinLimitsVolume: 0,\n      exceededVolume: 0,\n      totalPayment: \"\"\n    }, {\n      id: \"1.1\",\n      indicator: \"Забор (изъятие) водных ресурсов из поверхностного водного объекта\",\n      unit: \"тыс.м3\",\n      establishedVolume: \"DB stub\",\n      actualVolume: 0,\n      withinLimitsVolume: 0,\n      exceededVolume: 0,\n      totalPayment: \"\"\n    }, {\n      id: \"1.1.1\",\n      indicator: \"Забор (изъятие) водных ресурсов из поверхностного водного объекта (Qн.)\",\n      unit: \"тыс.м3\",\n      establishedVolume: \"DB stub\",\n      // будет меткой (из БД) если потребуется\n      actualVolume: 0,\n      withinLimitsVolume: 0,\n      exceededVolume: 0,\n      totalPayment: \"\"\n    }, {\n      id: \"1.1.2\",\n      indicator: \"Забор (изъятие) водных ресурсов из поверхностного водного объекта (Qп.)\",\n      unit: \"тыс.м3\",\n      establishedVolume: \"тестDB stub\",\n      // будет меткой (из БД) если потребуется\n      actualVolume: 0,\n      withinLimitsVolume: 0,\n      exceededVolume: 0,\n      totalPayment: \"\"\n    }],\n    rates: [{\n      id: \"2\",\n      indicator: \"Ставка платы\",\n      unit: \"руб/тыс.м3\",\n      establishedVolume: 0,\n      actualVolume: 0,\n      withinLimitsVolume: 0,\n      exceededVolume: 0,\n      totalPayment: \"\"\n    }, {\n      id: \"2.1\",\n      indicator: \"За забор (изъятие) водных ресурсов для населения\",\n      unit: \"руб/тыс.м3\",\n      establishedVolume: 0,\n      actualVolume: 0,\n      withinLimitsVolume: 0,\n      exceededVolume: 0,\n      totalPayment: \"\"\n    }, {\n      id: \"2.2\",\n      indicator: \"За забор (изъятие) водных ресурсов для предприятий\",\n      unit: \"руб/тыс.м3\",\n      establishedVolume: 0,\n      actualVolume: 0,\n      withinLimitsVolume: 0,\n      exceededVolume: 0,\n      totalPayment: \"\"\n    }, {\n      id: \"2.3\",\n      indicator: \"Повышающий коэффициент\",\n      unit: \"\",\n      establishedVolume: 1,\n      // по умолчанию 1\n      actualVolume: 1,\n      withinLimitsVolume: 1,\n      exceededVolume: 1,\n      totalPayment: \"\"\n    }],\n    payment: [{\n      id: \"3\",\n      indicator: \"Размер платы\",\n      unit: \"руб\",\n      establishedVolume: \"\",\n      actualVolume: \"\",\n      withinLimitsVolume: \"\",\n      exceededVolume: \"\",\n      totalPayment: \"\"\n    }, {\n      id: \"3.1\",\n      indicator: \"За забор (изъятие) водных ресурсов (п.3.2 + п.3.3)\",\n      unit: \"руб\",\n      establishedVolume: \"\",\n      actualVolume: \"\",\n      withinLimitsVolume: \"\",\n      exceededVolume: \"\",\n      totalPayment: \"\"\n    }, {\n      id: \"3.2\",\n      indicator: \"За забор (изъятие) водных ресурсов для населения\",\n      unit: \"руб\",\n      establishedVolume: \"\",\n      actualVolume: \"\",\n      withinLimitsVolume: \"\",\n      exceededVolume: \"\",\n      totalPayment: \"\"\n    }, {\n      id: \"3.3\",\n      indicator: \"За забор (изъятие) водных ресурсов для предприятий\",\n      unit: \"руб\",\n      establishedVolume: \"\",\n      actualVolume: \"\",\n      withinLimitsVolume: \"\",\n      exceededVolume: \"\",\n      totalPayment: \"\"\n    }]\n  };\n  const [rows, setRows] = useState(initialRows);\n\n  // Обработчик изменения пользовательского ввода\n  const handleChange = (section, id, field, value) => {\n    setRows(prevRows => {\n      const updatedSection = prevRows[section].map(row => {\n        // Для редактируемых полей (исключаем строки-шапки и суммирующие строки)\n        if (row.id === id) {\n          // Если поле не является числом, оставляем 0\n          const newValue = parseFloat(value) || 0;\n          return {\n            ...row,\n            [field]: newValue\n          };\n        }\n        return row;\n      });\n      return {\n        ...prevRows,\n        [section]: updatedSection\n      };\n    });\n  };\n\n  // Функция для вычисления значений в таблице \"parameters\"\n  const computeParameters = () => {\n    return rows.parameters.map(row => {\n      // Строки-шапки: id \"1\" – вывод заглушки/метки\n      if (row.id === \"1\") {\n        return {\n          ...row,\n          actualVolume: \"\",\n          withinLimitsVolume: \"\",\n          exceededVolume: \"\",\n          totalPayment: \"\"\n        };\n      }\n      // Строка-сумма: id \"1.1\" суммирует строки 1.1.1 и 1.1.2\n      if (row.id === \"1.1\") {\n        const child1 = rows.parameters.find(r => r.id === \"1.1.1\") || {};\n        const child2 = rows.parameters.find(r => r.id === \"1.1.2\") || {};\n        return {\n          ...row,\n          establishedVolume: (child1.establishedVolume || 0) + (child2.establishedVolume || 0),\n          actualVolume: (child1.actualVolume || 0) + (child2.actualVolume || 0),\n          withinLimitsVolume: (child1.withinLimitsVolume || 0) + (child2.withinLimitsVolume || 0),\n          exceededVolume: (child1.exceededVolume || 0) + (child2.exceededVolume || 0),\n          totalPayment: \"\"\n        };\n      }\n      // Для строк 1.1.1 и 1.1.2 – считаем «в пределах установленных» и «превышение»\n      if (row.id === \"1.1.1\" || row.id === \"1.1.2\") {\n        const established = row.establishedVolume || 0;\n        const actual = row.actualVolume || 0;\n        const within = Math.min(established, actual);\n        const exceeded = actual > established ? actual - established : 0;\n        return {\n          ...row,\n          withinLimitsVolume: within,\n          exceededVolume: exceeded,\n          totalPayment: \"\"\n        };\n      }\n      return row;\n    });\n  };\n\n  // Функция для вычисления значений в таблице \"payment\"\n  const computePayment = () => {\n    const param11 = rows.parameters.find(r => r.id === \"1.1.1\") || {};\n    const param12 = rows.parameters.find(r => r.id === \"1.1.2\") || {};\n    const rate21 = rows.rates.find(r => r.id === \"2.1\") || {};\n    const rate22 = rows.rates.find(r => r.id === \"2.2\") || {};\n\n    // Используем фактические объёмы из параметров\n    const val32 = (param11.actualVolume || 0) * (rate21.establishedVolume || 0);\n    const val33 = (param12.actualVolume || 0) * (rate22.establishedVolume || 0);\n    const val31 = val32 + val33;\n    return rows.payment.map(row => {\n      // Строка-шапка: id \"3\" – вывод пустых ячеек\n      if (row.id === \"3\") {\n        return {\n          ...row,\n          totalPayment: \"\"\n        };\n      }\n      if (row.id === \"3.2\") {\n        return {\n          ...row,\n          totalPayment: val32.toFixed(2)\n        };\n      }\n      if (row.id === \"3.3\") {\n        return {\n          ...row,\n          totalPayment: val33.toFixed(2)\n        };\n      }\n      if (row.id === \"3.1\") {\n        return {\n          ...row,\n          totalPayment: val31.toFixed(2)\n        };\n      }\n      return row;\n    });\n  };\n\n  // Функция определяет, редактируется ли конкретное поле\n  // Для таблицы \"parameters\": шапки (id \"1\") и суммирующей строки (id \"1.1\") – только метки,\n  // а также столбец \"establishedVolume\" – всегда метка (подгружается из БД)\n  const isEditable = (section, row, field) => {\n    if (section === \"parameters\") {\n      if (row.id === \"1\" || row.id === \"1.1\") return false;\n      if (field === \"establishedVolume\") return false;\n      return true;\n    }\n    return false;\n  };\n  const computedParameters = computeParameters();\n  const computedPayment = computePayment();\n\n  // Универсальная функция рендеринга секции таблицы\n  const renderTableSection = (title, section) => {\n    // Выбираем набор строк в зависимости от секции\n    const sectionRows = section === \"parameters\" ? computedParameters : section === \"payment\" ? computedPayment : rows[section]; // rates не менялись\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"payment-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u2116 \\u043F/\\u043F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u0435\\u043B\\u044C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0415\\u0434. \\u0438\\u0437\\u043C.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0423\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u043D\\u044B\\u0435 \\u043E\\u0431\\u044A\\u0435\\u043C\\u044B \\u0412\\u041F \\u0432 \\u043A\\u0432\\u0430\\u0440\\u0442\\u0430\\u043B\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0424\\u0430\\u043A\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u0438\\u0435 \\u043E\\u0431\\u044A\\u0435\\u043C\\u044B \\u0412\\u041F \\u0432 \\u043A\\u0432\\u0430\\u0440\\u0442\\u0430\\u043B\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0424\\u0430\\u043A\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u0438\\u0435 \\u043E\\u0431\\u044A\\u0435\\u043C\\u044B \\u0412\\u041F \\u0432 \\u043F\\u0440\\u0435\\u0434\\u0435\\u043B\\u0430\\u0445 \\u0443\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u043D\\u044B\\u0445 \\u043E\\u0431\\u044A\\u0435\\u043C\\u043E\\u0432\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u041F\\u0440\\u0435\\u0432\\u044B\\u0448\\u0435\\u043D\\u0438\\u0435 \\u0443\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u043D\\u044B\\u0445 \\u043E\\u0431\\u044A\\u0435\\u043C\\u043E\\u0432 \\u0412\\u041F \\u0432 \\u043A\\u0432\\u0430\\u0440\\u0442\\u0430\\u043B\\u0435\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0418\\u0442\\u043E\\u0433\\u043E \\u043E\\u043F\\u043B\\u0430\\u0442\\u0430 \\u0437\\u0430 \\u043A\\u0432\\u0430\\u0440\\u0442\\u0430\\u043B, \\u0440\\u0443\\u0431\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: sectionRows.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.id === \"1\" || row.id === \"2\" || row.id === \"3\" ? \"\" : row.indicator\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.id === \"1\" || row.id === \"2\" || row.id === \"3\" ? \"\" : row.unit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 11\n            }, this), [\"establishedVolume\", \"actualVolume\", \"withinLimitsVolume\", \"exceededVolume\"].map(field => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: isEditable(section, row, field) ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: row[field],\n                onChange: e => handleChange(section, row.id, field, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 17\n              }, this) :\n              // Если значение равно 0 или 0.00, выводим пустую строку (для итоговых строк)\n              row[field] === 0 || row[field] === \"0.00\" || row[field] === 0.0 ? \"\" : row[field]\n            }, field, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 15\n            }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: section === \"payment\" || row.id === \"1\" || row.id === \"2\" ?\n              // Для таблицы 3 все поля вычисляются, для таблиц 1 и 2 итог показываем пустую ячейку\n              row.totalPayment : isEditable(section, row, \"totalPayment\") ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: row.totalPayment,\n                onChange: e => handleChange(section, row.id, \"totalPayment\", e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 15\n              }, this) : row.totalPayment\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 11\n            }, this)]\n          }, row.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 9\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0420\\u0430\\u0441\\u0447\\u0435\\u0442 \\u0441\\u0443\\u043C\\u043C\\u044B \\u043E\\u043F\\u043B\\u0430\\u0442\\u044B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 5\n    }, this), renderTableSection(\"1. Параметры водопользования\", \"parameters\"), renderTableSection(\"2. Ставки платы\", \"rates\"), renderTableSection(\"3. Размер платы\", \"payment\")]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 381,\n    columnNumber: 5\n  }, this);\n};\n_s(PaymentCalculationForm, \"4KoqUZCo/b+RPBHR8oWtSP+7oXk=\");\n_c = PaymentCalculationForm;\nexport default PaymentCalculationForm;\nvar _c;\n$RefreshReg$(_c, \"PaymentCalculationForm\");","map":{"version":3,"names":["React","useState","useEffect","fetchSingleTableData","jsxDEV","_jsxDEV","Fragment","_Fragment","PaymentCalculationForm","_s","ratesData","setRatesData","fetchRates","rates","currentDate","Date","toISOString","split","console","log","filteredRates","reduce","acc","rate","rateDate","start_date","rate_type","error","updateRates","setRows","prevRows","updatedRates","map","_filteredRates$POPULA","_filteredRates$POPULA2","_filteredRates$POPULA3","_filteredRates$POPULA4","_filteredRates$ORG","_filteredRates$ORG2","_filteredRates$ORG3","_filteredRates$ORG4","id","establishedVolume","POPULATION","value","actualVolume","withinLimitsVolume","exceededVolume","ORG","Object","keys","length","initialRows","parameters","indicator","unit","totalPayment","payment","rows","handleChange","section","field","updatedSection","row","newValue","parseFloat","computeParameters","child1","find","r","child2","established","actual","within","Math","min","exceeded","computePayment","param11","param12","rate21","rate22","val32","val33","val31","toFixed","isEditable","computedParameters","computedPayment","renderTableSection","title","sectionRows","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","onChange","e","target","_c","$RefreshReg$"],"sources":["/home/noir/projects/diplom/front/src/components/PaymentCalculationForm.js"],"sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport { fetchSingleTableData } from \"../api/fetch_records\";\nimport \"../css/Water.css\";\n\nconst PaymentCalculationForm = () => {\n\n  // ........... Фетчим ставки ..............\n\n  const [ratesData, setRatesData] = useState({}); // Состояние для хранения ставок из БД\n\n  useEffect(() => {\n    const fetchRates = async () => {\n      try {\n        const rates = await fetchSingleTableData(\"rates\");\n        const currentDate = new Date().toISOString().split(\"T\")[0];\n        console.log(\"Текущая дата - \", currentDate);\n        // Фильтруем ставки, выбирая последние актуальные перед текущей датой\n        const filteredRates = rates.reduce((acc, rate) => {\n          const rateDate = new Date(rate.start_date).toISOString().split(\"T\")[0];\n          console.log(\"Дата ставки - \", rateDate);\n          if (rateDate <= currentDate) {\n            if (!acc[rate.rate_type] || new Date(acc[rate.rate_type].start_date) < new Date(rate.start_date)) {\n              acc[rate.rate_type] = rate;\n            }\n          }\n          return acc;\n        }, {});\n\n        setRatesData(filteredRates);\n      } catch (error) {\n        console.error(\"Ошибка при получении ставок:\", error);\n      }\n    };\n\n    fetchRates();\n  }, []);\n\n  const updateRates = (filteredRates) => {\n    setRows((prevRows) => {\n      console.log(\"[updateRates]:\", filteredRates)\n      const updatedRates = prevRows.rates.map((rate) => {\n        if (rate.id === \"2.1\") return { ...rate, establishedVolume: filteredRates.POPULATION?.value || 0, actualVolume: filteredRates.POPULATION?.value || 0, withinLimitsVolume: filteredRates.POPULATION?.value || 0, exceededVolume: filteredRates.POPULATION?.value || 0 };\n        if (rate.id === \"2.2\") return { ...rate, establishedVolume: filteredRates.ORG?.value || 0, actualVolume: filteredRates.ORG?.value || 0, withinLimitsVolume: filteredRates.ORG?.value || 0, exceededVolume: filteredRates.ORG?.value || 0 };\n        return rate;\n      });\n      return { ...prevRows, rates: updatedRates };\n    });\n  };\n\n  useEffect(() => {\n    if (Object.keys(ratesData).length > 0) {\n      updateRates(ratesData);\n    }\n  }, [ratesData]);\n\n\n  // .......................................\n\n  const initialRows = {\n    parameters: [\n      {\n        id: \"1\",\n        indicator: \"Параметры водопользования\",\n        unit: \"тыс.м3\",\n        establishedVolume: \"\", // заглушка – значение подгружается из БД\n        actualVolume: 0,\n        withinLimitsVolume: 0,\n        exceededVolume: 0,\n        totalPayment: \"\"\n      },\n      {\n        id: \"1.1\",\n        indicator: \"Забор (изъятие) водных ресурсов из поверхностного водного объекта\",\n        unit: \"тыс.м3\",\n        establishedVolume: \"DB stub\",\n        actualVolume: 0,\n        withinLimitsVolume: 0,\n        exceededVolume: 0,\n        totalPayment: \"\"\n      },\n      {\n        id: \"1.1.1\",\n        indicator:\n        \"Забор (изъятие) водных ресурсов из поверхностного водного объекта (Qн.)\",\n        unit: \"тыс.м3\",\n        establishedVolume: \"DB stub\", // будет меткой (из БД) если потребуется\n        actualVolume: 0,\n        withinLimitsVolume: 0,\n        exceededVolume: 0,\n        totalPayment: \"\"\n      },\n      {\n        id: \"1.1.2\",\n        indicator:\n        \"Забор (изъятие) водных ресурсов из поверхностного водного объекта (Qп.)\",\n        unit: \"тыс.м3\",\n        establishedVolume: \"тестDB stub\", // будет меткой (из БД) если потребуется\n        actualVolume: 0,\n        withinLimitsVolume: 0,\n        exceededVolume: 0,\n        totalPayment: \"\"\n      }\n    ],\n    rates: [\n      {\n        id: \"2\",\n        indicator: \"Ставка платы\",\n        unit: \"руб/тыс.м3\",\n        establishedVolume: 0,\n        actualVolume: 0,\n        withinLimitsVolume: 0,\n        exceededVolume: 0,\n        totalPayment: \"\"\n      },\n      {\n        id: \"2.1\",\n        indicator: \"За забор (изъятие) водных ресурсов для населения\",\n        unit: \"руб/тыс.м3\",\n        establishedVolume: 0,\n        actualVolume: 0,\n        withinLimitsVolume: 0,\n        exceededVolume: 0,\n        totalPayment: \"\"\n      },\n      {\n        id: \"2.2\",\n        indicator: \"За забор (изъятие) водных ресурсов для предприятий\",\n        unit: \"руб/тыс.м3\",\n        establishedVolume: 0,\n        actualVolume: 0,\n        withinLimitsVolume: 0,\n        exceededVolume: 0,\n        totalPayment: \"\"\n      },\n      {\n        id: \"2.3\",\n        indicator: \"Повышающий коэффициент\",\n        unit: \"\",\n        establishedVolume: 1, // по умолчанию 1\n        actualVolume: 1,\n        withinLimitsVolume: 1,\n        exceededVolume: 1,\n        totalPayment: \"\"\n      }\n    ],\n    payment: [\n      {\n        id: \"3\",\n        indicator: \"Размер платы\",\n        unit: \"руб\",\n        establishedVolume: \"\",\n        actualVolume: \"\",\n        withinLimitsVolume: \"\",\n        exceededVolume: \"\",\n        totalPayment: \"\"\n      },\n      {\n        id: \"3.1\",\n        indicator:\n        \"За забор (изъятие) водных ресурсов (п.3.2 + п.3.3)\",\n        unit: \"руб\",\n        establishedVolume: \"\",\n        actualVolume: \"\",\n        withinLimitsVolume: \"\",\n        exceededVolume: \"\",\n        totalPayment: \"\"\n      },\n      {\n        id: \"3.2\",\n        indicator:\n        \"За забор (изъятие) водных ресурсов для населения\",\n        unit: \"руб\",\n        establishedVolume: \"\",\n        actualVolume: \"\",\n        withinLimitsVolume: \"\",\n        exceededVolume: \"\",\n        totalPayment: \"\"\n      },\n      {\n        id: \"3.3\",\n        indicator:\n        \"За забор (изъятие) водных ресурсов для предприятий\",\n        unit: \"руб\",\n        establishedVolume: \"\",\n        actualVolume: \"\",\n        withinLimitsVolume: \"\",\n        exceededVolume: \"\",\n        totalPayment: \"\"\n      }\n    ]\n  };\n\n  const [rows, setRows] = useState(initialRows);\n\n  // Обработчик изменения пользовательского ввода\n  const handleChange = (section, id, field, value) => {\n    setRows((prevRows) => {\n      const updatedSection = prevRows[section].map((row) => {\n        // Для редактируемых полей (исключаем строки-шапки и суммирующие строки)\n        if (row.id === id) {\n          // Если поле не является числом, оставляем 0\n          const newValue = parseFloat(value) || 0;\n          return { ...row, [field]: newValue };\n        }\n        return row;\n      });\n      return { ...prevRows, [section]: updatedSection };\n    });\n  };\n\n  // Функция для вычисления значений в таблице \"parameters\"\n  const computeParameters = () => {\n    return rows.parameters.map((row) => {\n      // Строки-шапки: id \"1\" – вывод заглушки/метки\n      if (row.id === \"1\") {\n        return { ...row, actualVolume: \"\", withinLimitsVolume: \"\", exceededVolume: \"\", totalPayment: \"\" };\n      }\n      // Строка-сумма: id \"1.1\" суммирует строки 1.1.1 и 1.1.2\n      if (row.id === \"1.1\") {\n        const child1 = rows.parameters.find((r) => r.id === \"1.1.1\") || {};\n        const child2 = rows.parameters.find((r) => r.id === \"1.1.2\") || {};\n        return {\n          ...row,\n          establishedVolume:\n          (child1.establishedVolume || 0) + (child2.establishedVolume || 0),\n                               actualVolume:\n                               (child1.actualVolume || 0) + (child2.actualVolume || 0),\n                               withinLimitsVolume:\n                               (child1.withinLimitsVolume || 0) + (child2.withinLimitsVolume || 0),\n                               exceededVolume:\n                               (child1.exceededVolume || 0) + (child2.exceededVolume || 0),\n                               totalPayment: \"\"\n        };\n      }\n      // Для строк 1.1.1 и 1.1.2 – считаем «в пределах установленных» и «превышение»\n      if (row.id === \"1.1.1\" || row.id === \"1.1.2\") {\n        const established = row.establishedVolume || 0;\n        const actual = row.actualVolume || 0;\n        const within = Math.min(established, actual);\n        const exceeded = actual > established ? actual - established : 0;\n        return { ...row, withinLimitsVolume: within, exceededVolume: exceeded, totalPayment: \"\" };\n      }\n      return row;\n    });\n  };\n\n  // Функция для вычисления значений в таблице \"payment\"\n  const computePayment = () => {\n    const param11 = rows.parameters.find((r) => r.id === \"1.1.1\") || {};\n    const param12 = rows.parameters.find((r) => r.id === \"1.1.2\") || {};\n    const rate21 = rows.rates.find((r) => r.id === \"2.1\") || {};\n    const rate22 = rows.rates.find((r) => r.id === \"2.2\") || {};\n\n    // Используем фактические объёмы из параметров\n    const val32 =\n    (param11.actualVolume || 0) * (rate21.establishedVolume || 0);\n    const val33 =\n    (param12.actualVolume || 0) * (rate22.establishedVolume || 0);\n    const val31 = val32 + val33;\n\n    return rows.payment.map((row) => {\n      // Строка-шапка: id \"3\" – вывод пустых ячеек\n      if (row.id === \"3\") {\n        return { ...row, totalPayment: \"\" };\n      }\n      if (row.id === \"3.2\") {\n        return { ...row, totalPayment: val32.toFixed(2) };\n      }\n      if (row.id === \"3.3\") {\n        return { ...row, totalPayment: val33.toFixed(2) };\n      }\n      if (row.id === \"3.1\") {\n        return { ...row, totalPayment: val31.toFixed(2) };\n      }\n      return row;\n    });\n  };\n\n  // Функция определяет, редактируется ли конкретное поле\n  // Для таблицы \"parameters\": шапки (id \"1\") и суммирующей строки (id \"1.1\") – только метки,\n  // а также столбец \"establishedVolume\" – всегда метка (подгружается из БД)\n  const isEditable = (section, row, field) => {\n    if (section === \"parameters\") {\n      if (row.id === \"1\" || row.id === \"1.1\") return false;\n      if (field === \"establishedVolume\") return false;\n      return true;\n    }\n    return false;\n  };\n\n  const computedParameters = computeParameters();\n  const computedPayment = computePayment();\n\n  // Универсальная функция рендеринга секции таблицы\n  const renderTableSection = (title, section) => {\n    // Выбираем набор строк в зависимости от секции\n    const sectionRows =\n    section === \"parameters\"\n    ? computedParameters\n    : section === \"payment\"\n    ? computedPayment\n    : rows[section]; // rates не менялись\n\n    return (\n      <>\n      <h3>{title}</h3>\n      <table className=\"payment-table\">\n      <thead>\n      <tr>\n      <th>№ п/п</th>\n      <th>Показатель</th>\n      <th>Ед. изм.</th>\n      <th>Установленные объемы ВП в квартал</th>\n      <th>Фактические объемы ВП в квартал</th>\n      <th>Фактические объемы ВП в пределах установленных объемов</th>\n      <th>Превышение установленных объемов ВП в квартале</th>\n      <th>Итого оплата за квартал, руб</th>\n      </tr>\n      </thead>\n      <tbody>\n      {sectionRows.map((row) => (\n        <tr key={row.id}>\n        <td>{row.id}</td>\n        <td>\n        {/* Для строк-шапок (id \"1\", \"2\", \"3\") выводим просто пустую ячейку */}\n        {row.id === \"1\" || row.id === \"2\" || row.id === \"3\"\n          ? \"\"\n          : row.indicator}\n          </td>\n          <td>{row.id === \"1\" || row.id === \"2\" || row.id === \"3\" ? \"\" : row.unit}</td>\n          {/* Для каждой колонки, если поле редактируемое – инпут, иначе метка */}\n          {[\"establishedVolume\", \"actualVolume\", \"withinLimitsVolume\", \"exceededVolume\"].map(\n            (field) => (\n              <td key={field}>\n              {isEditable(section, row, field) ? (\n                <input\n                type=\"number\"\n                value={row[field]}\n                onChange={(e) =>\n                  handleChange(section, row.id, field, e.target.value)\n                }\n                />\n              ) : (\n                // Если значение равно 0 или 0.00, выводим пустую строку (для итоговых строк)\n                row[field] === 0 || row[field] === \"0.00\" || row[field] === 0.0\n                ? \"\"\n                : row[field]\n              )}\n              </td>\n            )\n          )}\n          {/* Последний столбец \"Итого оплата за квартал\" */}\n          <td>\n          {section === \"payment\" ||\n            row.id === \"1\" ||\n            row.id === \"2\"\n            ? // Для таблицы 3 все поля вычисляются, для таблиц 1 и 2 итог показываем пустую ячейку\n            row.totalPayment\n            : isEditable(section, row, \"totalPayment\") ? (\n              <input\n              type=\"number\"\n              value={row.totalPayment}\n              onChange={(e) =>\n                handleChange(section, row.id, \"totalPayment\", e.target.value)\n              }\n              />\n            ) : (\n              row.totalPayment\n            )}\n            </td>\n            </tr>\n      ))}\n      </tbody>\n      </table>\n      </>\n    );\n  };\n\n  return (\n    <div className=\"payment-container\">\n    <h2>Расчет суммы оплаты</h2>\n    {renderTableSection(\"1. Параметры водопользования\", \"parameters\")}\n    {renderTableSection(\"2. Ставки платы\", \"rates\")}\n    {renderTableSection(\"3. Размер платы\", \"payment\")}\n    </div>\n  );\n};\n\nexport default PaymentCalculationForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}