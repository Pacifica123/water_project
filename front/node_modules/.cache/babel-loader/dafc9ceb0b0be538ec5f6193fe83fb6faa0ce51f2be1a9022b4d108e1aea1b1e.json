{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://127.0.0.1:5000/api';\n\n/**\n * Универсальная функция для отправки данных формы на бэкенд.\n *\n * @param {string} formName - Название формы, которую нужно отправить (например, 'send_quarter', 'add_user', и т.д.).\n * @param {object} data - Объект с данными формы для отправки.\n * @param {object} [config] - Дополнительные параметры конфигурации, включая waterObjectCode и другие необходимые данные.\n * @returns {Promise<any>} - Промис, который разрешается с данными ответа или отклоняется с ошибкой.\n * @throws {Error} - Выбрасывает ошибку при проблемах с отправкой данных.\n */\nconst sendFormData = async (formName, data, config = {}) => {\n  const token = localStorage.getItem('jwtToken');\n  try {\n    const response = await axios.post(`${API_BASE_URL}/send_form`, {\n      ...config,\n      // Добавляем дополнительные параметры конфигурации\n      ...data,\n      // Добавляем данные формы\n      send_form: formName // Указываем название формы\n    }, {\n      headers: {\n        'tokenJWTAuthorization': token\n      },\n      withCredentials: true\n    });\n    return response.data; // Возвращаем данные ответа\n  } catch (error) {\n    console.error(\"Ошибка при отправке данных:\", error);\n    throw new Error(`Ошибка при отправке данных формы \"${formName}\": ${error.message}`);\n  }\n};\nconst sendSingleData = async (tableName, data, config = {}) => {\n  const token = localStorage.getItem('jwtToken');\n  try {\n    const response = await axios.post(`${API_BASE_URL}/records/${tableName}`, {\n      ...data // Добавляем данные формы\n    }, {\n      headers: {\n        'tokenJWTAuthorization': token\n      },\n      withCredentials: true\n    });\n    return response.data; // Возвращаем данные ответа\n  } catch (error) {\n    console.error(\"Ошибка при отправке данных:\", error);\n    throw new Error(`Ошибка при отправке данных формы \"${tableName}\": ${error.message}`);\n  }\n};\nconst sendUpdateData = async (tableName, recordId, data, config = {}) => {\n  const token = localStorage.getItem('jwtToken');\n  try {\n    const response = await axios.put(`${API_BASE_URL}/records/${tableName}/${recordId}`, {\n      ...data // Добавляем данные формы\n    }, {\n      headers: {\n        'tokenJWTAuthorization': token\n      },\n      withCredentials: true\n    });\n    return response.data; // Возвращаем данные ответа\n  } catch (error) {\n    console.error(\"Ошибка при отправке данных для обновления:\", error);\n    throw new Error(`Ошибка при отправке данных формы \"${tableName}\" для записи с ID ${recordId}: ${error.message}`);\n  }\n};\nexport { sendFormData, sendSingleData, sendUpdateData };","map":{"version":3,"names":["axios","API_BASE_URL","sendFormData","formName","data","config","token","localStorage","getItem","response","post","send_form","headers","withCredentials","error","console","Error","message","sendSingleData","tableName","sendUpdateData","recordId","put"],"sources":["/home/noir/projects/diplom/front/src/api/add_records.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://127.0.0.1:5000/api';\n\n/**\n * Универсальная функция для отправки данных формы на бэкенд.\n *\n * @param {string} formName - Название формы, которую нужно отправить (например, 'send_quarter', 'add_user', и т.д.).\n * @param {object} data - Объект с данными формы для отправки.\n * @param {object} [config] - Дополнительные параметры конфигурации, включая waterObjectCode и другие необходимые данные.\n * @returns {Promise<any>} - Промис, который разрешается с данными ответа или отклоняется с ошибкой.\n * @throws {Error} - Выбрасывает ошибку при проблемах с отправкой данных.\n */\nconst sendFormData = async (formName, data, config = {}) => {\n    const token = localStorage.getItem('jwtToken');\n\n    try {\n        const response = await axios.post(`${API_BASE_URL}/send_form`, {\n            ...config, // Добавляем дополнительные параметры конфигурации\n            ...data, // Добавляем данные формы\n            send_form: formName // Указываем название формы\n        }, {\n            headers: {\n                'tokenJWTAuthorization': token\n            },\n            withCredentials: true\n        });\n\n        return response.data; // Возвращаем данные ответа\n    } catch (error) {\n        console.error(\"Ошибка при отправке данных:\", error);\n        throw new Error(`Ошибка при отправке данных формы \"${formName}\": ${error.message}`);\n    }\n};\n\nconst sendSingleData = async (tableName, data, config = {}) => {\n    const token = localStorage.getItem('jwtToken');\n\n    try {\n        const response = await axios.post(`${API_BASE_URL}/records/${tableName}`, {\n            ...data // Добавляем данные формы\n        }, {\n            headers: {\n                'tokenJWTAuthorization': token\n            },\n            withCredentials: true\n        });\n\n        return response.data; // Возвращаем данные ответа\n    } catch (error) {\n        console.error(\"Ошибка при отправке данных:\", error);\n        throw new Error(`Ошибка при отправке данных формы \"${tableName}\": ${error.message}`);\n    }\n};\n\n\nconst sendUpdateData = async (tableName, recordId, data, config = {}) => {\n    const token = localStorage.getItem('jwtToken');\n\n    try {\n        const response = await axios.put(`${API_BASE_URL}/records/${tableName}/${recordId}`, {\n            ...data // Добавляем данные формы\n        }, {\n            headers: {\n                'tokenJWTAuthorization': token\n            },\n            withCredentials: true\n        });\n\n        return response.data; // Возвращаем данные ответа\n    } catch (error) {\n        console.error(\"Ошибка при отправке данных для обновления:\", error);\n        throw new Error(`Ошибка при отправке данных формы \"${tableName}\" для записи с ID ${recordId}: ${error.message}`);\n    }\n};\n\nexport {sendFormData, sendSingleData, sendUpdateData };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,IAAI,EAAEC,MAAM,GAAG,CAAC,CAAC,KAAK;EACxD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAE9C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,GAAGT,YAAY,YAAY,EAAE;MAC3D,GAAGI,MAAM;MAAE;MACX,GAAGD,IAAI;MAAE;MACTO,SAAS,EAAER,QAAQ,CAAC;IACxB,CAAC,EAAE;MACCS,OAAO,EAAE;QACL,uBAAuB,EAAEN;MAC7B,CAAC;MACDO,eAAe,EAAE;IACrB,CAAC,CAAC;IAEF,OAAOJ,QAAQ,CAACL,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOU,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAM,IAAIE,KAAK,CAAC,qCAAqCb,QAAQ,MAAMW,KAAK,CAACG,OAAO,EAAE,CAAC;EACvF;AACJ,CAAC;AAED,MAAMC,cAAc,GAAG,MAAAA,CAAOC,SAAS,EAAEf,IAAI,EAAEC,MAAM,GAAG,CAAC,CAAC,KAAK;EAC3D,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAE9C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,GAAGT,YAAY,YAAYkB,SAAS,EAAE,EAAE;MACtE,GAAGf,IAAI,CAAC;IACZ,CAAC,EAAE;MACCQ,OAAO,EAAE;QACL,uBAAuB,EAAEN;MAC7B,CAAC;MACDO,eAAe,EAAE;IACrB,CAAC,CAAC;IAEF,OAAOJ,QAAQ,CAACL,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOU,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAM,IAAIE,KAAK,CAAC,qCAAqCG,SAAS,MAAML,KAAK,CAACG,OAAO,EAAE,CAAC;EACxF;AACJ,CAAC;AAGD,MAAMG,cAAc,GAAG,MAAAA,CAAOD,SAAS,EAAEE,QAAQ,EAAEjB,IAAI,EAAEC,MAAM,GAAG,CAAC,CAAC,KAAK;EACrE,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAE9C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACsB,GAAG,CAAC,GAAGrB,YAAY,YAAYkB,SAAS,IAAIE,QAAQ,EAAE,EAAE;MACjF,GAAGjB,IAAI,CAAC;IACZ,CAAC,EAAE;MACCQ,OAAO,EAAE;QACL,uBAAuB,EAAEN;MAC7B,CAAC;MACDO,eAAe,EAAE;IACrB,CAAC,CAAC;IAEF,OAAOJ,QAAQ,CAACL,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOU,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;IAClE,MAAM,IAAIE,KAAK,CAAC,qCAAqCG,SAAS,qBAAqBE,QAAQ,KAAKP,KAAK,CAACG,OAAO,EAAE,CAAC;EACpH;AACJ,CAAC;AAED,SAAQf,YAAY,EAAEgB,cAAc,EAAEE,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}