{"ast":null,"code":"import axios from 'axios';\nimport { fetchSingleTableData } from \"./fetch_records.js\";\nconst API_BASE_URL = 'http://127.0.0.1:5000/api';\n\n/*export const fetchRecords = async () => {\n  const response = await axios.get(`${API_BASE_URL}/records`);\n  return response.data.records;\n};\n\nexport const createRecord = async (data) => {\n  const response = await axios.post(`${API_BASE_URL}/records`, data);\n  return response.data;\n};*/\n\nconst fetchWaterObjects = async () => {\n  try {\n    var _userData$org;\n    // 1. Get organization ID\n    const userData = JSON.parse(localStorage.getItem(\"user\"));\n    const orgId = userData === null || userData === void 0 ? void 0 : (_userData$org = userData.org) === null || _userData$org === void 0 ? void 0 : _userData$org.id;\n    if (!orgId) throw new Error(\"Organization ID not found in user data\");\n\n    // 2. Fetch all water points\n    const allWaterPoints = await fetchSingleTableData('water_point');\n\n    // 3. Filter water points by organization\n    const orgWaterPoints = allWaterPoints.filter(point => {\n      var _point$organisation_i;\n      return ((_point$organisation_i = point.organisation_id) === null || _point$organisation_i === void 0 ? void 0 : _point$organisation_i.toString()) === orgId.toString();\n    });\n    return orgWaterPoints;\n  } catch (error) {\n    console.error(\"Error fetching water points:\", error);\n    throw error;\n  }\n};\n\n// export default fetchWaterObjects;\n\nconst sendQuarterData = async (waterObjectCode, quarter, data) => {\n  const token = localStorage.getItem('jwtToken');\n  try {\n    let send_form = 'send_quarter';\n    console.log(waterObjectCode);\n    const response = await axios.post(`${API_BASE_URL}/send_form`, {\n      waterObjectCode,\n      quarter,\n      data,\n      send_form\n    }, {\n      headers: {\n        'tokenJWTAuthorization': token // Передаем токен в заголовке\n      },\n      withCredentials: true\n    });\n    return response.data; // Возвращаем данные ответа\n  } catch (error) {\n    throw new Error(\"Ошибка при отправке данных: \" + error.message);\n  }\n};\nexport { sendQuarterData, fetchWaterObjects };","map":{"version":3,"names":["axios","fetchSingleTableData","API_BASE_URL","fetchWaterObjects","_userData$org","userData","JSON","parse","localStorage","getItem","orgId","org","id","Error","allWaterPoints","orgWaterPoints","filter","point","_point$organisation_i","organisation_id","toString","error","console","sendQuarterData","waterObjectCode","quarter","data","token","send_form","log","response","post","headers","withCredentials","message"],"sources":["/home/noir/projects/diplom/front/src/api/records.js"],"sourcesContent":["import axios from 'axios';\n\nimport {fetchSingleTableData } from \"./fetch_records.js\";\n\nconst API_BASE_URL = 'http://127.0.0.1:5000/api';\n\n/*export const fetchRecords = async () => {\n  const response = await axios.get(`${API_BASE_URL}/records`);\n  return response.data.records;\n};\n\nexport const createRecord = async (data) => {\n  const response = await axios.post(`${API_BASE_URL}/records`, data);\n  return response.data;\n};*/\n\n\nconst fetchWaterObjects = async () => {\n  try {\n    // 1. Get organization ID\n    const userData = JSON.parse(localStorage.getItem(\"user\"));\n    const orgId = userData?.org?.id;\n    if (!orgId) throw new Error(\"Organization ID not found in user data\");\n\n    // 2. Fetch all water points\n    const allWaterPoints = await fetchSingleTableData('water_point');\n\n    // 3. Filter water points by organization\n    const orgWaterPoints = allWaterPoints.filter(\n      point => point.organisation_id?.toString() === orgId.toString()\n    );\n\n    return orgWaterPoints;\n\n  } catch (error) {\n    console.error(\"Error fetching water points:\", error);\n    throw error;\n  }\n};\n\n\n// export default fetchWaterObjects;\n\nconst sendQuarterData = async (waterObjectCode, quarter, data) => {\n  const token = localStorage.getItem('jwtToken');\n\n\n  try {\n    let send_form = 'send_quarter';\n    console.log(waterObjectCode);\n    const response = await axios.post(`${API_BASE_URL}/send_form`, {\n      waterObjectCode,\n      quarter,\n      data,\n      send_form\n    }, {\n      headers: {\n        'tokenJWTAuthorization': token // Передаем токен в заголовке\n      },\n      withCredentials: true\n    });\n\n    return response.data; // Возвращаем данные ответа\n  } catch (error) {\n    throw new Error(\"Ошибка при отправке данных: \" + error.message);\n  }\n};\n\nexport {sendQuarterData, fetchWaterObjects};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAAQC,oBAAoB,QAAQ,oBAAoB;AAExD,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IAAA,IAAAC,aAAA;IACF;IACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IACzD,MAAMC,KAAK,GAAGL,QAAQ,aAARA,QAAQ,wBAAAD,aAAA,GAARC,QAAQ,CAAEM,GAAG,cAAAP,aAAA,uBAAbA,aAAA,CAAeQ,EAAE;IAC/B,IAAI,CAACF,KAAK,EAAE,MAAM,IAAIG,KAAK,CAAC,wCAAwC,CAAC;;IAErE;IACA,MAAMC,cAAc,GAAG,MAAMb,oBAAoB,CAAC,aAAa,CAAC;;IAEhE;IACA,MAAMc,cAAc,GAAGD,cAAc,CAACE,MAAM,CAC1CC,KAAK;MAAA,IAAAC,qBAAA;MAAA,OAAI,EAAAA,qBAAA,GAAAD,KAAK,CAACE,eAAe,cAAAD,qBAAA,uBAArBA,qBAAA,CAAuBE,QAAQ,CAAC,CAAC,MAAKV,KAAK,CAACU,QAAQ,CAAC,CAAC;IAAA,CACjE,CAAC;IAED,OAAOL,cAAc;EAEvB,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;;AAGD;;AAEA,MAAME,eAAe,GAAG,MAAAA,CAAOC,eAAe,EAAEC,OAAO,EAAEC,IAAI,KAAK;EAChE,MAAMC,KAAK,GAAGnB,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAG9C,IAAI;IACF,IAAImB,SAAS,GAAG,cAAc;IAC9BN,OAAO,CAACO,GAAG,CAACL,eAAe,CAAC;IAC5B,MAAMM,QAAQ,GAAG,MAAM9B,KAAK,CAAC+B,IAAI,CAAC,GAAG7B,YAAY,YAAY,EAAE;MAC7DsB,eAAe;MACfC,OAAO;MACPC,IAAI;MACJE;IACF,CAAC,EAAE;MACDI,OAAO,EAAE;QACP,uBAAuB,EAAEL,KAAK,CAAC;MACjC,CAAC;MACDM,eAAe,EAAE;IACnB,CAAC,CAAC;IAEF,OAAOH,QAAQ,CAACJ,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOL,KAAK,EAAE;IACd,MAAM,IAAIR,KAAK,CAAC,8BAA8B,GAAGQ,KAAK,CAACa,OAAO,CAAC;EACjE;AACF,CAAC;AAED,SAAQX,eAAe,EAAEpB,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}