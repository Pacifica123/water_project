{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst API_URL_STRUCT = \"http://127.0.0.1:5000/api/get_struct\";\nconst API_URL_SINGLE = \"http://127.0.0.1:5000/api/edit_reference\";\nconst API_URL_SINGLE_MULTIFILTERS = \"http://127.0.0.1:5000/api/get_single_with_mf\";\nconst API_URL_STRUCT_MULTIFILTERS = \"http://127.0.0.1:5000/api/get_struct_mf\";\nconst handleTokenExpiration = () => {\n  localStorage.clear();\n  window.location.reload();\n};\n\n// const fetchModelSchema = ... TODO\n\n/**\n * Универсальная функция для получения данных структуры из API.\n * @param {string} structName - Имя структуры для запроса.\n * @param {object} filters - Объект с фильтрами для запроса (ключ: значение).\n * @param {string} token - JWT токен для авторизации (опционально).\n * @returns {Promise<object>} - Промис, разрешающийся в данные структуры или отклоняющийся с ошибкой.\n */\nconst fetchStructureData = async (structName, filters = {}, token = null) => {\n  try {\n    const params = {\n      struct_name: structName,\n      ...Object.entries(filters).reduce((acc, [key, value]) => {\n        acc[`filter_k`] = key;\n        acc[`filter_v`] = value;\n        return acc;\n      }, {})\n    };\n    const token = localStorage.getItem('jwtToken');\n    const headers = token ? {\n      'tokenJWTAuthorization': token\n    } : {};\n    const response = await axios.get(API_URL_STRUCT, {\n      params: params,\n      headers: headers,\n      withCredentials: true\n    });\n    if (response.status >= 400) {\n      if (response.status === 401 || response.data.error === \"Токен истек\") {\n        handleTokenExpiration();\n      }\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = response.data;\n    console.log(JSON.stringify(data, null, 4));\n    if (data.status !== \"success\") {\n      throw new Error(`API Error: ${data.error}`);\n    }\n    console.log(\"Данные успешно получены:\");\n    return data;\n  } catch (error) {\n    console.error(\"Ошибка при получении структуры:\", error);\n    console.log(\"Структура была:\", structName);\n    throw error; // Пробрасываем ошибку дальше\n  }\n};\nconst fetchSingleTableDataWithFilters = async (tableName, filters) => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    console.log(tableName);\n    const headers = token ? {\n      'tokenJWTAuthorization': token\n    } : {};\n\n    // Преобразуем объект фильтров в параметры запроса\n    const params = {\n      reference_select: tableName,\n      ...filters\n    };\n    const response = await axios.get(API_URL_SINGLE_MULTIFILTERS, {\n      headers: headers,\n      params: params,\n      withCredentials: true\n    });\n    if (response.status >= 400) {\n      if (response.status === 401 || response.data.error === \"Токен истек\") {\n        handleTokenExpiration();\n      }\n      console.log(\"Ошибка HTTP: \", response);\n      return null;\n    }\n    const data = response.data;\n    const records = data.new_content;\n    console.log(\" --> Сейчас будет - \", data.selected_reference);\n    console.log(records);\n    if (!records || records.length === 0) {\n      console.log(\"Нет записей в таблице\");\n      return null;\n    }\n    return records;\n  } catch (error) {\n    console.log(\"Ошибка при получении данных таблицы:\", error.message);\n    return null;\n  }\n};\nconst fetchSingleTableData = async tableName => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    console.log(tableName);\n    const headers = token ? {\n      'tokenJWTAuthorization': token\n    } : {};\n    const response = await axios.get(API_URL_SINGLE, {\n      headers: headers,\n      params: {\n        reference_select: tableName\n      },\n      withCredentials: true\n    });\n    // console.log(response);\n\n    if (response.status >= 400) {\n      if (response.status === 401 || response.data.error === \"Токен истек\") {\n        handleTokenExpiration();\n      }\n      console.log(\"Ошибка HTTP: \", response);\n      return null;\n    }\n    const data = response.data;\n    const records = data.new_content;\n    console.log(\" --> Сейчас будет - \", data.selected_reference);\n    console.log(records);\n    if (!records || records.length === 0) {\n      console.log(\"Нет записей в таблице\");\n      return null;\n    }\n    return records;\n  } catch (error) {\n    console.log(\"Ошибка при получении данных таблицы:\", error.message);\n    return null;\n  }\n};\nconst fetchStructDataWithFilters = async (structName, filters) => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const headers = token ? {\n      'tokenJWTAuthorization': token\n    } : {};\n    const params = {\n      struct_name: structName,\n      ...filters\n    };\n    const response = await axios.get(API_URL_STRUCT_MULTIFILTERS, {\n      headers: headers,\n      params: params,\n      withCredentials: true\n    });\n    if (response.status >= 400) {\n      console.log(\"Ошибка HTTP: \", response);\n      return null;\n    }\n    return response.data;\n  } catch (error) {\n    if (error.response.statusText === \"UNAUTHORIZED\") {\n      handleTokenExpiration();\n    }\n    console.error(\"Ошибка при запросе данных структуры:\", error);\n    return null;\n  }\n};\nexport { fetchStructureData, fetchSingleTableData, fetchSingleTableDataWithFilters, fetchStructDataWithFilters };","map":{"version":3,"names":["axios","API_URL_STRUCT","API_URL_SINGLE","API_URL_SINGLE_MULTIFILTERS","API_URL_STRUCT_MULTIFILTERS","handleTokenExpiration","localStorage","clear","window","location","reload","fetchStructureData","structName","filters","token","params","struct_name","Object","entries","reduce","acc","key","value","getItem","headers","response","get","withCredentials","status","data","error","Error","console","log","JSON","stringify","fetchSingleTableDataWithFilters","tableName","reference_select","records","new_content","selected_reference","length","message","fetchSingleTableData","fetchStructDataWithFilters","statusText"],"sources":["/home/noir/projects/diplom/front/src/api/fetch_records.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst API_URL_STRUCT = \"http://127.0.0.1:5000/api/get_struct\";\nconst API_URL_SINGLE = \"http://127.0.0.1:5000/api/edit_reference\";\nconst API_URL_SINGLE_MULTIFILTERS = \"http://127.0.0.1:5000/api/get_single_with_mf\";\nconst API_URL_STRUCT_MULTIFILTERS = \"http://127.0.0.1:5000/api/get_struct_mf\";\n\n\nconst handleTokenExpiration = () => {\n    localStorage.clear();\n    window.location.reload();\n};\n\n\n// const fetchModelSchema = ... TODO\n\n/**\n * Универсальная функция для получения данных структуры из API.\n * @param {string} structName - Имя структуры для запроса.\n * @param {object} filters - Объект с фильтрами для запроса (ключ: значение).\n * @param {string} token - JWT токен для авторизации (опционально).\n * @returns {Promise<object>} - Промис, разрешающийся в данные структуры или отклоняющийся с ошибкой.\n */\nconst fetchStructureData = async (structName, filters = {}, token = null) => {\n    try {\n        const params = {\n            struct_name: structName,\n            ...Object.entries(filters).reduce((acc, [key, value]) => {\n                acc[`filter_k`] = key;\n                acc[`filter_v`] = value;\n                return acc;\n            }, {})\n        };\n        const token = localStorage.getItem('jwtToken');\n        const headers = token ? { 'tokenJWTAuthorization': token } : {};\n\n        const response = await axios.get(API_URL_STRUCT, {\n            params: params,\n            headers: headers,\n            withCredentials: true\n        });\n\n        if (response.status >= 400) {\n            if (response.status === 401 || response.data.error === \"Токен истек\") {\n                handleTokenExpiration();\n            }\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = response.data;\n\n        console.log(JSON.stringify(data, null, 4));\n\n        if (data.status !== \"success\") {\n            throw new Error(`API Error: ${data.error}`);\n        }\n\n        console.log(\"Данные успешно получены:\");\n\n        return data;\n    } catch (error) {\n        console.error(\"Ошибка при получении структуры:\", error);\n        console.log(\"Структура была:\", structName);\n        throw error; // Пробрасываем ошибку дальше\n    }\n};\n\nconst fetchSingleTableDataWithFilters = async (tableName, filters) => {\n    try {\n        const token = localStorage.getItem('jwtToken');\n        console.log(tableName);\n        const headers = token ? { 'tokenJWTAuthorization': token } : {};\n\n        // Преобразуем объект фильтров в параметры запроса\n        const params = {\n            reference_select: tableName,\n            ...filters\n        };\n\n        const response = await axios.get(API_URL_SINGLE_MULTIFILTERS, {\n            headers: headers,\n            params: params,\n            withCredentials: true\n        });\n\n        if (response.status >= 400) {\n            if (response.status === 401 || response.data.error === \"Токен истек\") {\n                handleTokenExpiration();\n            }\n            console.log(\"Ошибка HTTP: \", response);\n            return null;\n        }\n\n        const data = response.data;\n        const records = data.new_content;\n\n        console.log(\" --> Сейчас будет - \", data.selected_reference)\n        console.log(records);\n\n        if (!records || records.length === 0) {\n            console.log(\"Нет записей в таблице\");\n            return null;\n        }\n\n        return records;\n    } catch (error) {\n        console.log(\"Ошибка при получении данных таблицы:\", error.message);\n        return null;\n    }\n};\n\n\nconst fetchSingleTableData = async (tableName) => {\n    try {\n        const token = localStorage.getItem('jwtToken');\n        console.log(tableName);\n        const headers = token ? { 'tokenJWTAuthorization': token } : {};\n        const response = await axios.get(API_URL_SINGLE, {\n            headers: headers,\n            params: { reference_select: tableName },\n            withCredentials: true\n        });\n        // console.log(response);\n\n        if (response.status >= 400) {\n            if (response.status === 401 || response.data.error === \"Токен истек\") {\n                handleTokenExpiration();\n            }\n            console.log(\"Ошибка HTTP: \", response);\n            return null;\n        }\n\n        const data = response.data;\n        const records = data.new_content;\n\n        console.log(\" --> Сейчас будет - \", data.selected_reference)\n        console.log(records);\n\n        if (!records || records.length === 0) {\n            console.log(\"Нет записей в таблице\");\n            return null;\n        }\n\n        return records;\n    } catch (error) {\n        console.log(\"Ошибка при получении данных таблицы:\", error.message);\n        return null;\n    }\n};\n\nconst fetchStructDataWithFilters = async (structName, filters) => {\n    try {\n        const token = localStorage.getItem('jwtToken');\n        const headers = token ? { 'tokenJWTAuthorization': token } : {};\n\n        const params = {\n            struct_name: structName,\n            ...filters\n        };\n\n        const response = await axios.get(API_URL_STRUCT_MULTIFILTERS, {\n            headers: headers,\n            params: params,\n            withCredentials: true\n        });\n\n        if (response.status >= 400) {\n\n            console.log(\"Ошибка HTTP: \", response);\n            return null;\n        }\n\n        return response.data;\n    } catch (error) {\n        if (error.response.statusText === \"UNAUTHORIZED\") {\n            handleTokenExpiration();\n        }\n        console.error(\"Ошибка при запросе данных структуры:\", error);\n        return null;\n    }\n};\n\nexport {fetchStructureData, fetchSingleTableData, fetchSingleTableDataWithFilters, fetchStructDataWithFilters};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}