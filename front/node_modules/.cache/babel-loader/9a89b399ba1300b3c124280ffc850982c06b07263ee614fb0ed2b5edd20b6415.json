{"ast":null,"code":"// api/fetch_files.js\nimport axios from \"axios\";\nconst API_URL = \"http://127.0.0.1:5000/api\";\nconst getFiles = async (entity_type, entity_id, file_type) => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const response = await axios.get(API_URL + \"/file_info\", {\n      headers: {\n        tokenJWTAuthorization: token\n      },\n      params: {\n        entity_type: entity_type,\n        entity_id: entity_id,\n        file_type: file_type\n      }\n    });\n    return {\n      ...response.data,\n      token\n    };\n  } catch (error) {\n    var _error$response;\n    console.error(\"Ошибка при получении информации о файле:\", error);\n    return {\n      status: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) || 500,\n      message: error.message\n    };\n  }\n};\n\n// const downloadFile = async (fileUrl, token, filename) => {\n//     try {\n//         const response = await axios.get(fileUrl, {\n//             responseType: 'blob', // Важно для скачивания файлов\n//             headers: {\n//                 tokenJWTAuthorization: token, // Передаем токен в заголовке\n//             },\n//         });\n//\n//         // Создаем ссылку для скачивания\n//         const url = window.URL.createObjectURL(new Blob([response.data]));\n//         const link = document.createElement('a');\n//         link.href = url;\n//         link.setAttribute('download', filename); // Указываем имя файла\n//         document.body.appendChild(link);\n//         link.click();\n//     } catch (error) {\n//         console.error(\"Ошибка при скачивании файла:\", error);\n//     }\n// };\n\nconst fetchFile = async (entityType, entityId, fileType) => {\n  const token = localStorage.getItem(\"jwtToken\");\n  try {\n    const response = await fetch(API_URL + `/files?entity_type=${entityType}&entity_id=${entityId}&file_type=${fileType}`, {\n      method: \"GET\",\n      headers: {\n        tokenJWTAuthorization: token\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n      console.log(data);\n      return data || null; // Возвращаем URL файла или null, если файла нет\n    } else if (response.status === 404) {\n      return null; // Файл не найден\n    } else {\n      throw new Error(\"Ошибка при проверке наличия файла\");\n    }\n  } catch (error) {\n    console.error(error);\n    return null; // В случае ошибки возвращаем null\n  }\n};\nconst downloadFile = async (fileUrl, fileName, token) => {\n  try {\n    const response = await fetch(fileUrl, {\n      headers: {\n        'tokenJWTAuthorization': token\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const blob = await response.blob();\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = fileName;\n    document.body.appendChild(a); // append the element to the dom\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a); //remove the element after download\n  } catch (error) {\n    console.error('Download error:', error);\n    // Здесь можно добавить логику обработки ошибок, например, отображение уведомления пользователю.\n  }\n};\nexport { getFiles, downloadFile, fetchFile };","map":{"version":3,"names":["axios","API_URL","getFiles","entity_type","entity_id","file_type","token","localStorage","getItem","response","get","headers","tokenJWTAuthorization","params","data","error","_error$response","console","status","message","fetchFile","entityType","entityId","fileType","fetch","method","ok","json","log","Error","downloadFile","fileUrl","fileName","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","revokeObjectURL","removeChild"],"sources":["/home/noir/projects/diplom/front/src/api/fetch_files.js"],"sourcesContent":["// api/fetch_files.js\nimport axios from \"axios\";\nconst API_URL = \"http://127.0.0.1:5000/api\";\n\nconst getFiles = async (entity_type, entity_id, file_type) => {\n    try {\n        const token = localStorage.getItem('jwtToken');\n        const response = await axios.get(API_URL+\"/file_info\", {\n            headers: {\n                tokenJWTAuthorization: token,\n            },\n            params: {\n                entity_type: entity_type,\n                entity_id: entity_id,\n                file_type: file_type,\n            },\n        });\n        return { ...response.data, token };\n    } catch (error) {\n        console.error(\"Ошибка при получении информации о файле:\", error);\n        return { status: error.response?.status || 500, message: error.message };\n    }\n};\n\n// const downloadFile = async (fileUrl, token, filename) => {\n//     try {\n//         const response = await axios.get(fileUrl, {\n//             responseType: 'blob', // Важно для скачивания файлов\n//             headers: {\n//                 tokenJWTAuthorization: token, // Передаем токен в заголовке\n//             },\n//         });\n//\n//         // Создаем ссылку для скачивания\n//         const url = window.URL.createObjectURL(new Blob([response.data]));\n//         const link = document.createElement('a');\n//         link.href = url;\n//         link.setAttribute('download', filename); // Указываем имя файла\n//         document.body.appendChild(link);\n//         link.click();\n//     } catch (error) {\n//         console.error(\"Ошибка при скачивании файла:\", error);\n//     }\n// };\n\nconst fetchFile = async (entityType, entityId, fileType) => {\n    const token = localStorage.getItem(\"jwtToken\");\n\n    try {\n        const response = await fetch(\n            API_URL+`/files?entity_type=${entityType}&entity_id=${entityId}&file_type=${fileType}`,\n            {\n                method: \"GET\",\n                headers: {\n                    tokenJWTAuthorization: token,\n                },\n            }\n        );\n        if (response.ok) {\n            const data = await response.json();\n            console.log(data);\n            return data|| null; // Возвращаем URL файла или null, если файла нет\n        } else if (response.status === 404) {\n            return null; // Файл не найден\n        } else {\n            throw new Error(\"Ошибка при проверке наличия файла\");\n        }\n    } catch (error) {\n        console.error(error);\n        return null; // В случае ошибки возвращаем null\n    }\n};\n\n\nconst downloadFile = async (fileUrl, fileName, token) => {\n    try {\n        const response = await fetch(fileUrl, {\n            headers: {\n                'tokenJWTAuthorization': token,\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = fileName;\n        document.body.appendChild(a); // append the element to the dom\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a); //remove the element after download\n    } catch (error) {\n        console.error('Download error:', error);\n        // Здесь можно добавить логику обработки ошибок, например, отображение уведомления пользователю.\n    }\n};\n\nexport { getFiles, downloadFile, fetchFile };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}