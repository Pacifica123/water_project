{"ast":null,"code":"var _jsxFileName = \"/home/noir/projects/diplom2/front/src/components/AdminPanel.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { fetchStructureData, fetchSingleTableData } from \"../api/fetch_records.js\"; // Функции получения данных\nimport { sendSingleData, sendUpdateData, sendDeleteData } from \"../api/add_records.js\"; // Функция для отправки данных\nimport Modal from \"./Modal\"; // Компонент модального окна\nimport axios from \"axios\";\nimport { translate } from \"../utils/translations.js\";\nimport { useNotification } from \"./NotificationContext.js\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AdminPanel = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  // Основные состояния\n  const [tableList, setTableList] = useState([]);\n  const [selectedTable, setSelectedTable] = useState(null);\n  const [tableRecords, setTableRecords] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [formData, setFormData] = useState({});\n  const {\n    showSuccess,\n    showEdit,\n    showError\n  } = useNotification(); // глобальные уведомления\n  // Дополнительное состояние для хранения схемы выбранной модели\n  const [modelSchema, setModelSchema] = useState(null);\n  // Состояние для режима редактирования (false - добавление, true - редактирование)\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [error, setError] = useState(null);\n  const [showTechnicalFields, setShowTechnicalFields] = useState(false);\n  // Получение списка таблиц при монтировании компонента\n  useEffect(() => {\n    const getTableList = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetchStructureData(\"allModels\");\n        console.log(\"Полученные данные:\", response.data);\n        // Преобразуем данные в нужный формат\n        const tableListData = response.data.map(([displayName, modelName]) => ({\n          [displayName]: modelName\n        }));\n        console.log(\"Преобразованные данные:\", tableListData);\n        setTableList(tableListData);\n      } catch (error) {\n        console.error(\"Ошибка загрузки списка таблиц:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getTableList();\n  }, []);\n\n  // При выборе таблицы получаем её записи и схему модели (если есть)\n  const handleSelectTable = async modelName => {\n    setSelectedTable(modelName);\n    setIsLoading(true);\n    try {\n      const records = await fetchSingleTableData(modelName);\n      setTableRecords(records);\n      // Здесь можно сделать дополнительный запрос для получения схемы модели, если API предоставляет её\n      // Пример: const schema = await fetchModelSchema(modelName);\n      // Для демонстрации предполагаем, что схема содержит массив объектов { field: \"имя_поля\", type: \"тип\", foreignKey: true/false, options: [...] }\n      // const schema = await fetchModelSchema(modelName); TODO\n      const schema = await fetchStructureData(\"schema_\" + modelName);\n      setModelSchema(schema);\n    } catch (error) {\n      console.error(\"Ошибка загрузки данных для таблицы\", modelName, error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Функция для вызова модального окна в режиме добавления\n  const handleAddButton = () => {\n    setFormData({});\n    setIsEditMode(false);\n    setModalVisible(true);\n  };\n\n  // Функция для вызова модального окна в режиме редактирования\n  const handleEditButton = record => {\n    setFormData(record);\n    setIsEditMode(true);\n    setModalVisible(true);\n  };\n  const [alertVisible, setAlertVisible] = useState(false);\n  const showAlert = () => {\n    setAlertVisible(true);\n    setTimeout(() => {\n      setAlertVisible(false);\n    }, 10000);\n  };\n\n  // Обработчик сабмита формы. Здесь динамически собираем объект данных, исходя из схемы\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n    // Инициализация объекта данных.\n    const dataToSend = {\n      ...formData,\n      created_by: \"admin\",\n      // Автоподстановка\n      created_at: isEditMode ? undefined : new Date().toISOString() // Для новых записей\n    };\n    // Удаляем технические поля для редактирования\n    if (isEditMode) {\n      delete dataToSend.created_by;\n      delete dataToSend.created_at;\n      dataToSend.updated_by = \"admin\";\n      dataToSend.updated_at = new Date().toISOString();\n    }\n    if (modelSchema && modelSchema.data) {\n      modelSchema.data.filter(field => field.field !== \"id\").forEach(field => {\n        // В зависимости от типа поля можно выполнить преобразования\n        // Если значение отсутствует, можно задать значение по умолчанию\n        let value = formData[field.field] || \"\";\n        // Если поле связано с внешним ключом, значение должно быть выбрано из options\n        // Здесь можно добавить дополнительную логику, например, проверку, что value входит в options\n        if (field.type.includes(\"BOOLEAN\")) {\n          value = formData[field.field] === \"on\"; // Преобразуем значение checkbox в boolean\n        }\n\n        // Проверка, если поле является ENUM\n        if (field.isEnum) {\n          // Находим ключ ENUM по значению\n          const enumOptions = field.options || [];\n          const enumKey = enumOptions.find(opt => opt.value === value);\n          console.log(\"Был выбран вариант: \", enumKey);\n          if (enumKey) {\n            value = enumKey.label; // Используем ключ вместо значения\n          }\n        }\n        console.log(value);\n        dataToSend[field.field] = value;\n      });\n    } else {\n      // Если схема не получена, используем formData как есть (но это крайний случай)\n      dataToSend = {\n        ...formData\n      };\n    }\n    try {\n      if (isEditMode) {\n        await sendUpdateData(selectedTable, formData.id, dataToSend);\n        showEdit(\"✏️ Запись успешно отредактирована!\");\n      } else {\n        await sendSingleData(selectedTable, dataToSend);\n        showSuccess(\"✅ Запись успешно добавлена!\");\n      }\n      handleSelectTable(selectedTable);\n      setModalVisible(false);\n    } catch (error) {\n      console.error('Ошибка при ${isEditMode ? \"редактировании\" : \"добавлении\"} записи:', error);\n      setError(error.message);\n      showError(\"❌ Ошибка при сохранении данных.\");\n    }\n  };\n\n  // Пример запроса схемы модели (подводные камни: отсутствие схемы на бэкенде, несоответствие типов)\n  const fetchModelSchema = async modelName => {\n    try {\n      // Здесь предполагается, что API предоставляет эндпоинт для схемы модели\n      const response = await axios.get(`http://127.0.0.1:5000/api/schema/${modelName}`);\n      // Пример ожидаемого формата: [{ field: \"organisation_name\", type: \"string\", foreignKey: false }, ...]\n      return response.data;\n    } catch (error) {\n      console.error(\"Ошибка получения схемы модели:\", error);\n      return null;\n    }\n  };\n\n  // Рендер списка таблиц\n  const renderTableList = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content-container_for_renderTableList\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"table-title\",\n        children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0442\\u0430\\u0431\\u043B\\u0438\\u0446\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 5\n      }, this), tableList.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\u041D\\u0435\\u0442 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"table-grid\",\n        children: tableList.map((table, idx) => {\n          const [displayName, modelName] = Object.entries(table)[0];\n          if (modelName === \"history\") return null;\n          if (modelName === \"WCLfor3132\") return null;\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"table-item\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"table-card-button\",\n              onClick: () => handleSelectTable(modelName),\n              children: displayName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 9\n            }, this)\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 9\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n  const renderCellValue = (value, fieldSchema) => {\n    if (typeof value === \"object\" && value !== null && fieldSchema !== null && fieldSchema !== void 0 && fieldSchema.foreignKey) {\n      const id = value.id || \"?\";\n      const displayKey = findDisplayKey(value);\n      return displayKey ? `${id}. ${value[displayKey]}` : id;\n    }\n    return value !== null && value !== undefined ? value.toString() : \"\";\n  };\n  const findDisplayKey = obj => {\n    const priorityKeys = [\"name\", \"title\", \"organisation_name\", \"code_value\"];\n    return priorityKeys.find(key => obj.hasOwnProperty(key));\n  };\n\n  // Рендер списка записей выбранной таблицы с CRUD-кнопками\n  const renderTableRecords = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      overflowX: \"auto\",\n      Width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: () => {\n          setSelectedTable(null);\n          setModelSchema(null);\n        },\n        children: \"\\u041D\\u0430\\u0437\\u0430\\u0434 \\u043A \\u0442\\u0430\\u0431\\u043B\\u0438\\u0446\\u0430\\u043C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\u0417\\u0430\\u043F\\u0438\\u0441\\u0438 \\u0442\\u0430\\u0431\\u043B\\u0438\\u0446\\u044B: \", translate(selectedTable)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        onClick: handleAddButton,\n        children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0437\\u0430\\u043F\\u0438\\u0441\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        style: {\n          backgroundColor: showTechnicalFields ? \"#6c757d\" : \"#17a2b8\"\n        },\n        onClick: () => setShowTechnicalFields(!showTechnicalFields),\n        children: showTechnicalFields ? \"Скрыть тех. поля\" : \"Показать тех. поля\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 5\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this) : tableRecords && tableRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-scroll-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"data-table-admin\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [Object.keys(tableRecords[0]).map((key, index) => (![\"created_by\", \"updated_by\", \"deleted_by\", \"created_at\", \"updated_at\", \"deleted_at\"].includes(key) || showTechnicalFields) && /*#__PURE__*/_jsxDEV(\"th\", {\n              children: translate(key)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 11\n            }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0414\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u044F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tableRecords.map(record => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [Object.keys(record).map((key, idx) => {\n                if (![\"created_by\", \"updated_by\", \"deleted_by\", \"created_at\", \"updated_at\", \"deleted_at\"].includes(key) || showTechnicalFields) {\n                  var _modelSchema$data;\n                  const fieldSchema = modelSchema === null || modelSchema === void 0 ? void 0 : (_modelSchema$data = modelSchema.data) === null || _modelSchema$data === void 0 ? void 0 : _modelSchema$data.find(f => f.field === key);\n                  return /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: translate(renderCellValue(record[key], fieldSchema))\n                  }, idx, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 275,\n                    columnNumber: 17\n                  }, this);\n                } else {\n                  return null;\n                }\n              }), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"edit-button\",\n                  onClick: () => handleEditButton(record),\n                  children: \"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 284,\n                  columnNumber: 11\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"delete-button\",\n                  onClick: () => handleDeleteRecord(record.id),\n                  children: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 290,\n                  columnNumber: 11\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 11\n              }, this)]\n            }, record.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 11\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u043F\\u0438\\u0441\\u0435\\u0439 \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n\n  // Функция для удаления записи\n  const handleDeleteRecord = async recordId => {\n    try {\n      await sendDeleteData(selectedTable, recordId);\n      handleSelectTable(selectedTable); // Обновить таблицу после удаления\n    } catch (error) {\n      console.error(\"Ошибка удаления записи:\", error);\n    }\n  };\n\n  // Рендер модального окна с динамической формой\n  const renderModal = () => /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: () => {\n      setModalVisible(false);\n      setError(null); // Сбрасываем ошибку при закрытии модального окна\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: isEditMode ? \"Редактировать запись\" : \"Добавить запись\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 5\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleFormSubmit,\n      children: [modelSchema && modelSchema.data ? modelSchema.data.filter(field => field.field !== \"id\" && ![\"created_at\", \"created_by\", \"updated_at\", \"updated_by\", \"is_deleted\", \"deleted_at\", \"deleted_by\"].includes(field.field)).map((field, index) => {\n        var _field$options;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: \"10px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              display: \"block\",\n              marginBottom: \"5px\"\n            },\n            children: [translate(field.field), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 9\n          }, this), field.foreignKey || ((_field$options = field.options) === null || _field$options === void 0 ? void 0 : _field$options.length) > 0 || field.isEnum ? /*#__PURE__*/_jsxDEV(ForeignKeySelect, {\n            field: field,\n            value: formData[field.field] || \"\",\n            onChange: newValue => {\n              setFormData({\n                ...formData,\n                [field.field]: newValue\n              });\n              if (formData[field.field]) {\n                var _document$getElementB;\n                // Автоматическое сворачивание поля после заполнения\n                (_document$getElementB = document.getElementById(field.field)) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.classList.add(\"filled\");\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n            type: getInputType(field.type),\n            value: formData[field.field] || \"\",\n            onChange: e => {\n              setFormData({\n                ...formData,\n                [field.field]: e.target.value\n              });\n              if (e.target.value) {\n                var _document$getElementB2;\n                // Автоматическое сворачивание поля после заполнения\n                (_document$getElementB2 = document.getElementById(field.field)) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.classList.add(\"filled\");\n              }\n            },\n            id: field.field // Добавление ID для управления классами\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 9\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\u0421\\u0445\\u0435\\u043C\\u0430 \\u043C\\u043E\\u0434\\u0435\\u043B\\u0438 \\u043D\\u0435 \\u043F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u0430.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"submit-button\",\n          type: \"submit\",\n          children: isEditMode ? \"Сохранить изменения\" : \"Добавить\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 321,\n    columnNumber: 5\n  }, this);\n\n  // Пример стиля для скрытия/сворачивания поля после его заполнения\n  const styles = {\n    \".filled\": {\n      display: \"none\" // Скрывает поле, если оно заполнено\n    }\n  };\n\n  // Функция для определения типа input в зависимости от типа поля\n  const getInputType = type => {\n    switch (type) {\n      case \"VARCHAR\":\n      case \"TEXT\":\n      case \"STRING\":\n        return \"text\";\n      case \"DATE\":\n        return \"date\";\n      case \"DATETIME\":\n      case \"TIMESTAMP\":\n        return \"datetime-local\";\n      case \"BOOLEAN\":\n        return \"checkbox\";\n      case \"INTEGER\":\n      case \"BIGINT\":\n      case \"NUMERIC\":\n      case \"DECIMAL\":\n        return \"number\";\n      default:\n        return \"text\";\n    }\n  };\n\n  // Пример компонента для внешнего ключа, который выполняет отдельный запрос для получения значений\n  const ForeignKeySelect = ({\n    field,\n    value,\n    onChange\n  }) => {\n    _s();\n    const [options, setOptions] = useState(field.options || []);\n    const [loading, setLoading] = useState(false);\n    useEffect(() => {\n      const fetchOptions = async () => {\n        setLoading(true);\n        try {\n          if (field.isEnum) {\n            console.log(\"В ForeignKeySelect попало!\");\n            // Если это перечисление, получаем варианты через API\n            const response = await fetchStructureData(\"enum_\" + field.enumType);\n            console.log(\"Вот что попадет в setOptions: \", response.data);\n            setOptions(response.data);\n          } else if (field.foreignKey) {\n            // Если это внешний ключ, используем существующие опции\n            setOptions(field.options);\n          } else {\n            // Если это не перечисление и не внешний ключ, не делаем запрос\n            setOptions([]);\n          }\n        } catch (error) {\n          console.error(\"Ошибка получения опций для\", field.field, error);\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchOptions();\n    }, [field.field, field.enumType]);\n    return /*#__PURE__*/_jsxDEV(\"select\", {\n      value: value,\n      onChange: e => {\n        onChange(e.target.value);\n      },\n      children: loading ? /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 9\n        }, this), options === null || options === void 0 ? void 0 : options.map((opt, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: opt.value,\n          children: opt.label\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 7\n    }, this);\n  };\n  _s(ForeignKeySelect, \"31+8rc9QnNF7KlLN3vWe6WmirPk=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-panel\",\n    children: [alertVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-alert\",\n      children: \"\\u2705 \\u0414\\u0430\\u043D\\u043D\\u044B\\u0435 \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u044B!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0410\\u0434\\u043C\\u0438\\u043D-\\u043F\\u0430\\u043D\\u0435\\u043B\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 5\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 19\n    }, this), !selectedTable ? renderTableList() : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\",\n      children: renderTableRecords()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 7\n    }, this), modalVisible && renderModal()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 486,\n    columnNumber: 5\n  }, this);\n};\n_s2(AdminPanel, \"T1JaWnHDJKJtQ+RvbTJdf1eYuSo=\", false, function () {\n  return [useNotification];\n});\n_c = AdminPanel;\nexport default AdminPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminPanel\");","map":{"version":3,"names":["React","useEffect","useState","fetchStructureData","fetchSingleTableData","sendSingleData","sendUpdateData","sendDeleteData","Modal","axios","translate","useNotification","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminPanel","_s2","_s","$RefreshSig$","tableList","setTableList","selectedTable","setSelectedTable","tableRecords","setTableRecords","isLoading","setIsLoading","modalVisible","setModalVisible","formData","setFormData","showSuccess","showEdit","showError","modelSchema","setModelSchema","isEditMode","setIsEditMode","error","setError","showTechnicalFields","setShowTechnicalFields","getTableList","response","console","log","data","tableListData","map","displayName","modelName","handleSelectTable","records","schema","handleAddButton","handleEditButton","record","alertVisible","setAlertVisible","showAlert","setTimeout","handleFormSubmit","e","preventDefault","dataToSend","created_by","created_at","undefined","Date","toISOString","updated_by","updated_at","filter","field","forEach","value","type","includes","isEnum","enumOptions","options","enumKey","find","opt","label","id","message","fetchModelSchema","get","renderTableList","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","table","idx","Object","entries","onClick","renderCellValue","fieldSchema","foreignKey","displayKey","findDisplayKey","toString","obj","priorityKeys","key","hasOwnProperty","renderTableRecords","style","overflowX","Width","backgroundColor","keys","index","_modelSchema$data","f","handleDeleteRecord","recordId","renderModal","onClose","onSubmit","_field$options","marginBottom","display","ForeignKeySelect","onChange","newValue","_document$getElementB","document","getElementById","classList","add","getInputType","target","_document$getElementB2","styles","setOptions","loading","setLoading","fetchOptions","enumType","_c","$RefreshReg$"],"sources":["/home/noir/projects/diplom2/front/src/components/AdminPanel.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  fetchStructureData,\n  fetchSingleTableData,\n} from \"../api/fetch_records.js\"; // Функции получения данных\nimport {\n  sendSingleData,\n  sendUpdateData,\n  sendDeleteData,\n} from \"../api/add_records.js\"; // Функция для отправки данных\nimport Modal from \"./Modal\"; // Компонент модального окна\nimport axios from \"axios\";\nimport {translate} from \"../utils/translations.js\"\nimport { useNotification } from \"./NotificationContext.js\";\n\nconst AdminPanel = () => {\n  // Основные состояния\n  const [tableList, setTableList] = useState([]);\n  const [selectedTable, setSelectedTable] = useState(null);\n  const [tableRecords, setTableRecords] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [formData, setFormData] = useState({});\n  const { showSuccess, showEdit, showError } = useNotification(); // глобальные уведомления\n  // Дополнительное состояние для хранения схемы выбранной модели\n  const [modelSchema, setModelSchema] = useState(null);\n  // Состояние для режима редактирования (false - добавление, true - редактирование)\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [error, setError] = useState(null);\n  const [showTechnicalFields, setShowTechnicalFields] = useState(false);\n  // Получение списка таблиц при монтировании компонента\n  useEffect(() => {\n    const getTableList = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetchStructureData(\"allModels\");\n        console.log(\"Полученные данные:\", response.data);\n        // Преобразуем данные в нужный формат\n        const tableListData = response.data.map(([displayName, modelName]) => ({\n          [displayName]: modelName,\n        }));\n        console.log(\"Преобразованные данные:\", tableListData);\n        setTableList(tableListData);\n      } catch (error) {\n        console.error(\"Ошибка загрузки списка таблиц:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getTableList();\n  }, []);\n\n  // При выборе таблицы получаем её записи и схему модели (если есть)\n  const handleSelectTable = async (modelName) => {\n    setSelectedTable(modelName);\n    setIsLoading(true);\n    try {\n      const records = await fetchSingleTableData(modelName);\n      setTableRecords(records);\n      // Здесь можно сделать дополнительный запрос для получения схемы модели, если API предоставляет её\n      // Пример: const schema = await fetchModelSchema(modelName);\n      // Для демонстрации предполагаем, что схема содержит массив объектов { field: \"имя_поля\", type: \"тип\", foreignKey: true/false, options: [...] }\n      // const schema = await fetchModelSchema(modelName); TODO\n      const schema = await fetchStructureData(\"schema_\" + modelName);\n      setModelSchema(schema);\n    } catch (error) {\n      console.error(\"Ошибка загрузки данных для таблицы\", modelName, error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Функция для вызова модального окна в режиме добавления\n  const handleAddButton = () => {\n    setFormData({});\n    setIsEditMode(false);\n    setModalVisible(true);\n  };\n\n  // Функция для вызова модального окна в режиме редактирования\n  const handleEditButton = (record) => {\n    setFormData(record);\n    setIsEditMode(true);\n    setModalVisible(true);\n  };\n\n  const [alertVisible, setAlertVisible] = useState(false);\n\n  const showAlert = () => {\n    setAlertVisible(true);\n    setTimeout(() => {\n      setAlertVisible(false);\n    }, 10000);\n  };\n\n\n  // Обработчик сабмита формы. Здесь динамически собираем объект данных, исходя из схемы\n  const handleFormSubmit = async (e) => {\n\n    e.preventDefault();\n    // Инициализация объекта данных.\n    const dataToSend = {\n      ...formData,\n      created_by: \"admin\", // Автоподстановка\n      created_at: isEditMode ? undefined : new Date().toISOString(), // Для новых записей\n    };\n    // Удаляем технические поля для редактирования\n    if (isEditMode) {\n      delete dataToSend.created_by;\n      delete dataToSend.created_at;\n      dataToSend.updated_by = \"admin\";\n      dataToSend.updated_at = new Date().toISOString();\n    }\n\n    if (modelSchema && modelSchema.data) {\n      modelSchema.data\n      .filter((field) => field.field !== \"id\")\n      .forEach((field) => {\n        // В зависимости от типа поля можно выполнить преобразования\n        // Если значение отсутствует, можно задать значение по умолчанию\n        let value = formData[field.field] || \"\";\n        // Если поле связано с внешним ключом, значение должно быть выбрано из options\n        // Здесь можно добавить дополнительную логику, например, проверку, что value входит в options\n        if (field.type.includes(\"BOOLEAN\")) {\n          value = formData[field.field] === \"on\"; // Преобразуем значение checkbox в boolean\n        }\n\n        // Проверка, если поле является ENUM\n        if (field.isEnum) {\n          // Находим ключ ENUM по значению\n          const enumOptions = field.options || [];\n          const enumKey = enumOptions.find((opt) => opt.value === value);\n          console.log(\"Был выбран вариант: \", enumKey);\n          if (enumKey) {\n            value = enumKey.label; // Используем ключ вместо значения\n          }\n        }\n        console.log(value);\n        dataToSend[field.field] = value;\n      });\n    } else {\n      // Если схема не получена, используем formData как есть (но это крайний случай)\n      dataToSend = { ...formData };\n    }\n\n    try {\n      if (isEditMode) {\n        await sendUpdateData(selectedTable, formData.id, dataToSend);\n        showEdit(\"✏️ Запись успешно отредактирована!\");\n      } else {\n        await sendSingleData(selectedTable, dataToSend);\n        showSuccess(\"✅ Запись успешно добавлена!\");\n      }\n\n      handleSelectTable(selectedTable);\n      setModalVisible(false);\n    } catch (error) {\n      console.error(\n        'Ошибка при ${isEditMode ? \"редактировании\" : \"добавлении\"} записи:',\n        error\n      );\n      setError(error.message);\n      showError(\"❌ Ошибка при сохранении данных.\");\n    }\n  };\n\n  // Пример запроса схемы модели (подводные камни: отсутствие схемы на бэкенде, несоответствие типов)\n  const fetchModelSchema = async (modelName) => {\n    try {\n      // Здесь предполагается, что API предоставляет эндпоинт для схемы модели\n      const response = await axios.get(\n        `http://127.0.0.1:5000/api/schema/${modelName}`,\n      );\n      // Пример ожидаемого формата: [{ field: \"organisation_name\", type: \"string\", foreignKey: false }, ...]\n      return response.data;\n    } catch (error) {\n      console.error(\"Ошибка получения схемы модели:\", error);\n      return null;\n    }\n  };\n\n  // Рендер списка таблиц\n  const renderTableList = () => (\n    <div className=\"content-container_for_renderTableList\">\n    <div className=\"table-section\">\n    <h2 className=\"table-title\">Список таблиц</h2>\n    {tableList.length === 0 && <div>Нет данных</div>}\n    <ul className=\"table-grid\">\n    {tableList.map((table, idx) => {\n      const [displayName, modelName] = Object.entries(table)[0];\n      if (modelName === \"history\") return null;\n      if (modelName === \"WCLfor3132\") return null;\n      return (\n        <li key={idx} className=\"table-item\">\n        <button\n        className=\"table-card-button\"\n        onClick={() => handleSelectTable(modelName)}\n        >\n        {displayName}\n        </button>\n        </li>\n      );\n    })}\n    </ul>\n    </div>\n    </div>\n  );\n\n  const renderCellValue = (value, fieldSchema) => {\n    if (\n      typeof value === \"object\" &&\n      value !== null &&\n      fieldSchema?.foreignKey\n    ) {\n      const id = value.id || \"?\";\n      const displayKey = findDisplayKey(value);\n      return displayKey ? `${id}. ${value[displayKey]}` : id;\n    }\n    return value !== null && value !== undefined ? value.toString() : \"\";\n  };\n\n  const findDisplayKey = (obj) => {\n    const priorityKeys = [\"name\", \"title\", \"organisation_name\", \"code_value\"];\n    return priorityKeys.find((key) => obj.hasOwnProperty(key));\n  };\n\n  // Рендер списка записей выбранной таблицы с CRUD-кнопками\n  const renderTableRecords = () => (\n    <div style ={{overflowX:\"auto\", Width:\"100%\"}}>\n    <div className=\"content-container\">\n    <button\n    className=\"back-button\"\n    onClick={() => {\n      setSelectedTable(null);\n      setModelSchema(null);\n    }}\n    >\n    Назад к таблицам\n    </button>\n    <h2>Записи таблицы: {translate(selectedTable)}</h2>\n    <button className=\"submit-button\" onClick={handleAddButton}>\n    Добавить запись\n    </button>\n    <button\n    className=\"submit-button\"\n    style={{ backgroundColor: showTechnicalFields ? \"#6c757d\" : \"#17a2b8\" }}\n    onClick={() => setShowTechnicalFields(!showTechnicalFields)}\n    >\n    {showTechnicalFields ? \"Скрыть тех. поля\" : \"Показать тех. поля\"}\n    </button>\n    </div>\n    {isLoading ? (\n      <div>Загрузка...</div>\n    ) : tableRecords && tableRecords.length > 0 ? (\n      <div className=\"table-scroll-wrapper\">\n      <table className=\"data-table-admin\">\n      <thead>\n      <tr>\n      {Object.keys(tableRecords[0]).map((key, index) => (\n        (![\"created_by\", \"updated_by\", \"deleted_by\", \"created_at\", \"updated_at\", \"deleted_at\"].includes(key) || showTechnicalFields) && (\n          <th key={index}>{translate(key)}</th>\n        )\n      ))}\n      <th>Действия</th>\n      </tr>\n      </thead>\n      <tbody>\n      {tableRecords.map((record) => {\n        return (\n          <tr key={record.id}>\n          {Object.keys(record).map((key, idx) => {\n            if (![\"created_by\", \"updated_by\", \"deleted_by\", \"created_at\", \"updated_at\", \"deleted_at\"].includes(key) || showTechnicalFields) {\n              const fieldSchema = modelSchema?.data?.find((f) => f.field === key);\n              return (\n                <td key={idx}>\n                {translate(renderCellValue(record[key], fieldSchema))}\n                </td>\n              );\n            } else {\n              return null;\n            }\n          })}\n          <td>\n          <button\n          className=\"edit-button\"\n          onClick={() => handleEditButton(record)}\n          >\n          Редактировать\n          </button>\n          <button\n          className=\"delete-button\"\n          onClick={() => handleDeleteRecord(record.id)}\n          >\n          Удалить\n          </button>\n          </td>\n          </tr>\n        );\n      })}\n      </tbody>\n      </table>\n      </div>\n    ) : (\n      <div>Записей не найдено</div>\n    )}\n    </div>\n  );\n\n  // Функция для удаления записи\n  const handleDeleteRecord = async (recordId) => {\n    try {\n      await sendDeleteData(selectedTable, recordId);\n      handleSelectTable(selectedTable); // Обновить таблицу после удаления\n    } catch (error) {\n      console.error(\"Ошибка удаления записи:\", error);\n    }\n  };\n\n  // Рендер модального окна с динамической формой\n  const renderModal = () => (\n    <Modal\n    onClose={() => {\n      setModalVisible(false);\n      setError(null); // Сбрасываем ошибку при закрытии модального окна\n    }}\n    >\n    <h3>{isEditMode ? \"Редактировать запись\" : \"Добавить запись\"}</h3>\n    {error && <div className=\"error-message\">{error}</div>}\n    <form onSubmit={handleFormSubmit}>\n    {modelSchema && modelSchema.data ? (\n      modelSchema.data\n      .filter(\n        (field) =>\n        field.field !== \"id\" &&\n        ![\n          \"created_at\",\n          \"created_by\",\n          \"updated_at\",\n          \"updated_by\",\n          \"is_deleted\",\n          \"deleted_at\",\n          \"deleted_by\",\n        ].includes(field.field)\n      )\n      .map((field, index) => (\n        <div key={index} style={{ marginBottom: \"10px\" }}>\n        <label style={{ display: \"block\", marginBottom: \"5px\" }}>\n        {translate(field.field)}:\n        </label>\n        {/* Если поле связано с внешним ключом или имеет опции, отрисовываем ForeignKeySelect */}\n        {field.foreignKey ||\n          field.options?.length > 0 ||\n          field.isEnum ? (\n            <ForeignKeySelect\n            field={field}\n            value={formData[field.field] || \"\"}\n            onChange={(newValue) => {\n              setFormData({ ...formData, [field.field]: newValue });\n              if (formData[field.field]) {\n                // Автоматическое сворачивание поля после заполнения\n                document\n                .getElementById(field.field)\n                ?.classList.add(\"filled\");\n              }\n            }}\n            />\n          ) : (\n            <input\n            type={getInputType(field.type)}\n            value={formData[field.field] || \"\"}\n            onChange={(e) => {\n              setFormData({\n                ...formData,\n                [field.field]: e.target.value,\n              });\n              if (e.target.value) {\n                // Автоматическое сворачивание поля после заполнения\n                document\n                .getElementById(field.field)\n                ?.classList.add(\"filled\");\n              }\n            }}\n            id={field.field} // Добавление ID для управления классами\n            />\n          )}\n          </div>\n      ))\n    ) : (\n      <div>Схема модели не получена.</div>\n    )}\n\n    <center><button className=\"submit-button\" type=\"submit\">\n    {isEditMode ? \"Сохранить изменения\" : \"Добавить\"}\n    </button>\n    </center>\n    </form>\n    </Modal>\n  );\n\n  // Пример стиля для скрытия/сворачивания поля после его заполнения\n  const styles = {\n    \".filled\": {\n      display: \"none\", // Скрывает поле, если оно заполнено\n    },\n  };\n\n  // Функция для определения типа input в зависимости от типа поля\n  const getInputType = (type) => {\n    switch (type) {\n      case \"VARCHAR\":\n      case \"TEXT\":\n      case \"STRING\":\n        return \"text\";\n      case \"DATE\":\n        return \"date\";\n      case \"DATETIME\":\n      case \"TIMESTAMP\":\n        return \"datetime-local\";\n      case \"BOOLEAN\":\n        return \"checkbox\";\n      case \"INTEGER\":\n      case \"BIGINT\":\n      case \"NUMERIC\":\n      case \"DECIMAL\":\n        return \"number\";\n      default:\n        return \"text\";\n    }\n  };\n\n  // Пример компонента для внешнего ключа, который выполняет отдельный запрос для получения значений\n  const ForeignKeySelect = ({ field, value, onChange }) => {\n    const [options, setOptions] = useState(field.options || []);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n      const fetchOptions = async () => {\n        setLoading(true);\n        try {\n          if (field.isEnum) {\n            console.log(\"В ForeignKeySelect попало!\");\n            // Если это перечисление, получаем варианты через API\n            const response = await fetchStructureData(\"enum_\" + field.enumType);\n            console.log(\"Вот что попадет в setOptions: \", response.data);\n            setOptions(response.data);\n          } else if (field.foreignKey) {\n            // Если это внешний ключ, используем существующие опции\n            setOptions(field.options);\n          } else {\n            // Если это не перечисление и не внешний ключ, не делаем запрос\n            setOptions([]);\n          }\n        } catch (error) {\n          console.error(\"Ошибка получения опций для\", field.field, error);\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchOptions();\n    }, [field.field, field.enumType]);\n\n    return (\n      <select\n      value={value}\n      onChange={(e) => {\n        onChange(e.target.value);\n      }}\n      >\n      {loading ? (\n        <option>Загрузка...</option>\n      ) : (\n        <>\n        <option value=\"\">Выберите значение</option>\n        {options?.map((opt, idx) => (\n          <option key={idx} value={opt.value}>\n          {opt.label}\n          </option>\n        ))}\n        </>\n      )}\n      </select>\n    );\n  };\n\n  return (\n    <div className=\"admin-panel\">\n    {alertVisible && (\n      <div className=\"custom-alert\">\n      ✅ Данные успешно добавлены!\n      </div>\n    )}\n    <center><h1>Админ-панель</h1></center>\n    {isLoading && <div>Загрузка...</div>}\n    {!selectedTable ? (\n      renderTableList()\n    ) : (\n      <div className=\"table-container\">{renderTableRecords()}</div>\n    )}\n    {modalVisible && renderModal()}\n    </div>\n  );\n};\n\nexport default AdminPanel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}