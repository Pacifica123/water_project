{"ast":null,"code":"var _jsxFileName = \"/home/noir/projects/diplom/front/src/components/AdminPanel.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { fetchStructureData, fetchSingleTableData } from \"../api/fetch_records.js\"; // Функции получения данных\nimport { sendSingleData, sendUpdateData, sendDeleteData } from \"../api/add_records.js\"; // Функция для отправки данных\nimport Modal from \"./Modal\"; // Компонент модального окна\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AdminPanel = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  // Основные состояния\n  const [tableList, setTableList] = useState([]);\n  const [selectedTable, setSelectedTable] = useState(null);\n  const [tableRecords, setTableRecords] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [formData, setFormData] = useState({});\n  // Дополнительное состояние для хранения схемы выбранной модели\n  const [modelSchema, setModelSchema] = useState(null);\n  // Состояние для режима редактирования (false - добавление, true - редактирование)\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Получение списка таблиц при монтировании компонента\n  useEffect(() => {\n    const getTableList = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetchStructureData(\"allModels\");\n        console.log('Полученные данные:', response.data);\n        // Преобразуем данные в нужный формат\n        const tableListData = response.data.map(([displayName, modelName]) => ({\n          [displayName]: modelName\n        }));\n        console.log('Преобразованные данные:', tableListData);\n        setTableList(tableListData);\n      } catch (error) {\n        console.error(\"Ошибка загрузки списка таблиц:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getTableList();\n  }, []);\n\n  // При выборе таблицы получаем её записи и схему модели (если есть)\n  const handleSelectTable = async modelName => {\n    setSelectedTable(modelName);\n    setIsLoading(true);\n    try {\n      const records = await fetchSingleTableData(modelName);\n      setTableRecords(records);\n      // Здесь можно сделать дополнительный запрос для получения схемы модели, если API предоставляет её\n      // Пример: const schema = await fetchModelSchema(modelName);\n      // Для демонстрации предполагаем, что схема содержит массив объектов { field: \"имя_поля\", type: \"тип\", foreignKey: true/false, options: [...] }\n      // const schema = await fetchModelSchema(modelName); TODO\n      const schema = await fetchStructureData(\"schema_\" + modelName);\n      setModelSchema(schema);\n    } catch (error) {\n      console.error(\"Ошибка загрузки данных для таблицы\", modelName, error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Функция для вызова модального окна в режиме добавления\n  const handleAddButton = () => {\n    setFormData({});\n    setIsEditMode(false);\n    setModalVisible(true);\n  };\n\n  // Функция для вызова модального окна в режиме редактирования\n  const handleEditButton = record => {\n    setFormData(record);\n    setIsEditMode(true);\n    setModalVisible(true);\n  };\n\n  // Обработчик сабмита формы. Здесь динамически собираем объект данных, исходя из схемы\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n    // Инициализация объекта данных.\n    const dataToSend = {\n      ...formData,\n      created_by: \"admin\",\n      // Автоподстановка\n      created_at: isEditMode ? undefined : new Date().toISOString() // Для новых записей\n    };\n    // Удаляем технические поля для редактирования\n    if (isEditMode) {\n      delete dataToSend.created_by;\n      delete dataToSend.created_at;\n      dataToSend.updated_by = \"admin\";\n      dataToSend.updated_at = new Date().toISOString();\n    }\n    if (modelSchema && modelSchema.data) {\n      modelSchema.data.filter(field => field.field !== \"id\").forEach(field => {\n        // В зависимости от типа поля можно выполнить преобразования\n        // Если значение отсутствует, можно задать значение по умолчанию\n        let value = formData[field.field] || \"\";\n        // Если поле связано с внешним ключом, значение должно быть выбрано из options\n        // Здесь можно добавить дополнительную логику, например, проверку, что value входит в options\n        if (field.type.includes(\"BOOLEAN\")) {\n          value = formData[field.field] === \"on\"; // Преобразуем значение checkbox в boolean\n        }\n\n        // Проверка, если поле является ENUM\n        if (field.isEnum) {\n          // Находим ключ ENUM по значению\n          const enumOptions = field.options || [];\n          const enumKey = enumOptions.find(opt => opt.value === value);\n          console.log(\"Был выбран вариант: \", enumKey);\n          if (enumKey) {\n            value = enumKey.label; // Используем ключ вместо значения\n          }\n        }\n        console.log(value);\n        dataToSend[field.field] = value;\n      });\n    } else {\n      // Если схема не получена, используем formData как есть (но это крайний случай)\n      dataToSend = {\n        ...formData\n      };\n    }\n    try {\n      if (isEditMode) {\n        // Отправляем данные для обновления\n        await sendUpdateData(selectedTable, formData.id, dataToSend); // Передаем ID записи для обновления\n      } else {\n        // Отправляем данные для создания\n        await sendSingleData(selectedTable, dataToSend);\n      }\n      handleSelectTable(selectedTable);\n      setModalVisible(false);\n    } catch (error) {\n      console.error(`Ошибка при ${isEditMode ? \"редактировании\" : \"добавлении\"} записи:`, error);\n      setError(error.message);\n    }\n  };\n\n  // Пример запроса схемы модели (подводные камни: отсутствие схемы на бэкенде, несоответствие типов)\n  const fetchModelSchema = async modelName => {\n    try {\n      // Здесь предполагается, что API предоставляет эндпоинт для схемы модели\n      const response = await axios.get(`http://127.0.0.1:5000/api/schema/${modelName}`);\n      // Пример ожидаемого формата: [{ field: \"organisation_name\", type: \"string\", foreignKey: false }, ...]\n      return response.data;\n    } catch (error) {\n      console.error(\"Ошибка получения схемы модели:\", error);\n      return null;\n    }\n  };\n\n  // Рендер списка таблиц\n  const renderTableList = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content-container_for_renderTableList\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0442\\u0430\\u0431\\u043B\\u0438\\u0446\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }, this), tableList.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u041D\\u0435\\u0442 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 36\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"selectors_for_renderTableList\",\n      children: tableList.map((table, idx) => {\n        const [displayName, modelName] = Object.entries(table)[0];\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"custom-button\",\n            onClick: () => handleSelectTable(modelName),\n            children: displayName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 17\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 9\n  }, this);\n  const renderCellValue = (value, fieldSchema) => {\n    if (typeof value === 'object' && value !== null && fieldSchema !== null && fieldSchema !== void 0 && fieldSchema.foreignKey) {\n      const id = value.id || '?';\n      const displayKey = findDisplayKey(value);\n      return displayKey ? `${id}. ${value[displayKey]}` : id;\n    }\n    return value !== null && value !== undefined ? value.toString() : '';\n  };\n  const findDisplayKey = obj => {\n    const priorityKeys = ['name', 'title', 'organisation_name', 'code_value'];\n    return priorityKeys.find(key => obj.hasOwnProperty(key));\n  };\n\n  // Рендер списка записей выбранной таблицы с CRUD-кнопками\n  const renderTableRecords = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: () => {\n          setSelectedTable(null);\n          setModelSchema(null);\n        },\n        children: \"\\u041D\\u0430\\u0437\\u0430\\u0434 \\u043A \\u0442\\u0430\\u0431\\u043B\\u0438\\u0446\\u0430\\u043C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\u0417\\u0430\\u043F\\u0438\\u0441\\u0438 \\u0442\\u0430\\u0431\\u043B\\u0438\\u0446\\u044B: \", selectedTable]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        onClick: handleAddButton,\n        children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0437\\u0430\\u043F\\u0438\\u0441\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }, this) : tableRecords && tableRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"data-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [Object.keys(tableRecords[0]).map((key, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: key\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u0414\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u044F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tableRecords.map(record => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [Object.keys(record).map((key, idx) => {\n              var _modelSchema$data;\n              const fieldSchema = modelSchema === null || modelSchema === void 0 ? void 0 : (_modelSchema$data = modelSchema.data) === null || _modelSchema$data === void 0 ? void 0 : _modelSchema$data.find(f => f.field === key);\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                children: renderCellValue(record[key], fieldSchema)\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 29\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"edit-button\",\n                onClick: () => handleEditButton(record),\n                children: \"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"delete-button\",\n                onClick: () => handleDeleteRecord(record.id),\n                children: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 21\n            }, this)]\n          }, record.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 21\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u043F\\u0438\\u0441\\u0435\\u0439 \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 9\n  }, this);\n\n  // Функция для удаления записи\n  const handleDeleteRecord = async recordId => {\n    try {\n      await sendDeleteData(selectedTable, recordId);\n      handleSelectTable(selectedTable); // Обновить таблицу после удаления\n    } catch (error) {\n      console.error(\"Ошибка удаления записи:\", error);\n    }\n  };\n\n  // Рендер модального окна с динамической формой\n  const renderModal = () => /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: () => {\n      setModalVisible(false);\n      setError(null); // Сбрасываем ошибку при закрытии модального окна\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: isEditMode ? \"Редактировать запись\" : \"Добавить запись\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleFormSubmit,\n      children: [modelSchema && modelSchema.data ? modelSchema.data.filter(field => field.field !== \"id\").map((field, index) => {\n        var _field$options;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: \"10px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              display: \"block\",\n              marginBottom: \"5px\"\n            },\n            children: [field.field, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 17\n          }, this), field.foreignKey || ((_field$options = field.options) === null || _field$options === void 0 ? void 0 : _field$options.length) > 0 || field.isEnum ? /*#__PURE__*/_jsxDEV(ForeignKeySelect, {\n            field: field,\n            value: formData[field.field] || \"\"\n            // onChange={(e) => setFormData({ ...formData, [field.field]: e.target.value })}\n            ,\n            onChange: newValue => {\n              setFormData({\n                ...formData,\n                [field.field]: newValue\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 21\n          }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n            type: getInputType(field.type),\n            value: formData[field.field] || \"\",\n            onChange: e => setFormData({\n              ...formData,\n              [field.field]: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 21\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 17\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\u0421\\u0445\\u0435\\u043C\\u0430 \\u043C\\u043E\\u0434\\u0435\\u043B\\u0438 \\u043D\\u0435 \\u043F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u0430.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: isEditMode ? \"Сохранить изменения\" : \"Добавить\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 9\n  }, this);\n\n  // Функция для определения типа input в зависимости от типа поля\n  const getInputType = type => {\n    switch (type) {\n      case \"VARCHAR\":\n      case \"TEXT\":\n      case \"STRING\":\n        return \"text\";\n      case \"DATE\":\n        return \"date\";\n      case \"DATETIME\":\n      case \"TIMESTAMP\":\n        return \"datetime-local\";\n      case \"BOOLEAN\":\n        return \"checkbox\";\n      case \"INTEGER\":\n      case \"BIGINT\":\n      case \"NUMERIC\":\n      case \"DECIMAL\":\n        return \"number\";\n      default:\n        return \"text\";\n    }\n  };\n\n  // Пример компонента для внешнего ключа, который выполняет отдельный запрос для получения значений\n  const ForeignKeySelect = ({\n    field,\n    value,\n    onChange\n  }) => {\n    _s();\n    const [options, setOptions] = useState(field.options || []);\n    const [loading, setLoading] = useState(false);\n    useEffect(() => {\n      const fetchOptions = async () => {\n        setLoading(true);\n        try {\n          if (field.isEnum) {\n            console.log(\"В ForeignKeySelect попало!\");\n            // Если это перечисление, получаем варианты через API\n            const response = await fetchStructureData(\"enum_\" + field.enumType);\n            console.log(\"Вот что попадет в setOptions: \", response.data);\n            setOptions(response.data);\n          } else if (field.foreignKey) {\n            // Если это внешний ключ, используем существующие опции\n            setOptions(field.options);\n          } else {\n            // Если это не перечисление и не внешний ключ, не делаем запрос\n            setOptions([]);\n          }\n        } catch (error) {\n          console.error(\"Ошибка получения опций для\", field.field, error);\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchOptions();\n    }, [field.field, field.enumType]);\n    return /*#__PURE__*/_jsxDEV(\"select\", {\n      value: value,\n      onChange: e => {\n        onChange(e.target.value);\n      },\n      children: loading ? /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 17\n        }, this), options === null || options === void 0 ? void 0 : options.map((opt, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: opt.value,\n          children: opt.label\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 21\n        }, this))]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 13\n    }, this);\n  };\n  _s(ForeignKeySelect, \"31+8rc9QnNF7KlLN3vWe6WmirPk=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0410\\u0434\\u043C\\u0438\\u043D-\\u043F\\u0430\\u043D\\u0435\\u043B\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 9\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 23\n    }, this), !selectedTable ? renderTableList() : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\",\n      children: renderTableRecords()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 13\n    }, this), modalVisible && renderModal()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 402,\n    columnNumber: 9\n  }, this);\n};\n_s2(AdminPanel, \"SLfDZT2uNXpdA7IqSB+yJTWlmTo=\");\n_c = AdminPanel;\nexport default AdminPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminPanel\");","map":{"version":3,"names":["React","useEffect","useState","fetchStructureData","fetchSingleTableData","sendSingleData","sendUpdateData","sendDeleteData","Modal","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminPanel","_s2","_s","$RefreshSig$","tableList","setTableList","selectedTable","setSelectedTable","tableRecords","setTableRecords","isLoading","setIsLoading","modalVisible","setModalVisible","formData","setFormData","modelSchema","setModelSchema","isEditMode","setIsEditMode","error","setError","getTableList","response","console","log","data","tableListData","map","displayName","modelName","handleSelectTable","records","schema","handleAddButton","handleEditButton","record","handleFormSubmit","e","preventDefault","dataToSend","created_by","created_at","undefined","Date","toISOString","updated_by","updated_at","filter","field","forEach","value","type","includes","isEnum","enumOptions","options","enumKey","find","opt","label","id","message","fetchModelSchema","get","renderTableList","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","table","idx","Object","entries","onClick","renderCellValue","fieldSchema","foreignKey","displayKey","findDisplayKey","toString","obj","priorityKeys","key","hasOwnProperty","renderTableRecords","keys","index","_modelSchema$data","f","handleDeleteRecord","recordId","renderModal","onClose","onSubmit","_field$options","style","marginBottom","display","ForeignKeySelect","onChange","newValue","getInputType","target","setOptions","loading","setLoading","fetchOptions","enumType","_c","$RefreshReg$"],"sources":["/home/noir/projects/diplom/front/src/components/AdminPanel.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { fetchStructureData, fetchSingleTableData } from \"../api/fetch_records.js\"; // Функции получения данных\nimport { sendSingleData, sendUpdateData, sendDeleteData } from \"../api/add_records.js\"; // Функция для отправки данных\nimport Modal from \"./Modal\"; // Компонент модального окна\nimport axios from \"axios\";\n\nconst AdminPanel = () => {\n    // Основные состояния\n    const [tableList, setTableList] = useState([]);\n    const [selectedTable, setSelectedTable] = useState(null);\n    const [tableRecords, setTableRecords] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [modalVisible, setModalVisible] = useState(false);\n    const [formData, setFormData] = useState({});\n    // Дополнительное состояние для хранения схемы выбранной модели\n    const [modelSchema, setModelSchema] = useState(null);\n    // Состояние для режима редактирования (false - добавление, true - редактирование)\n    const [isEditMode, setIsEditMode] = useState(false);\n    const [error, setError] = useState(null);\n\n\n    // Получение списка таблиц при монтировании компонента\n    useEffect(() => {\n        const getTableList = async () => {\n            setIsLoading(true);\n            try {\n                const response = await fetchStructureData(\"allModels\");\n                console.log('Полученные данные:', response.data);\n                // Преобразуем данные в нужный формат\n                const tableListData = response.data.map(([displayName, modelName]) => ({ [displayName]: modelName }));\n                console.log('Преобразованные данные:', tableListData);\n                setTableList(tableListData);\n            } catch (error) {\n                console.error(\"Ошибка загрузки списка таблиц:\", error);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        getTableList();\n    }, []);\n\n\n\n    // При выборе таблицы получаем её записи и схему модели (если есть)\n    const handleSelectTable = async (modelName) => {\n        setSelectedTable(modelName);\n        setIsLoading(true);\n        try {\n            const records = await fetchSingleTableData(modelName);\n            setTableRecords(records);\n            // Здесь можно сделать дополнительный запрос для получения схемы модели, если API предоставляет её\n            // Пример: const schema = await fetchModelSchema(modelName);\n            // Для демонстрации предполагаем, что схема содержит массив объектов { field: \"имя_поля\", type: \"тип\", foreignKey: true/false, options: [...] }\n            // const schema = await fetchModelSchema(modelName); TODO\n            const schema = await fetchStructureData(\"schema_\"+modelName);\n            setModelSchema(schema);\n        } catch (error) {\n            console.error(\"Ошибка загрузки данных для таблицы\", modelName, error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    // Функция для вызова модального окна в режиме добавления\n    const handleAddButton = () => {\n        setFormData({});\n        setIsEditMode(false);\n        setModalVisible(true);\n    };\n\n    // Функция для вызова модального окна в режиме редактирования\n    const handleEditButton = (record) => {\n        setFormData(record);\n        setIsEditMode(true);\n        setModalVisible(true);\n    };\n\n    // Обработчик сабмита формы. Здесь динамически собираем объект данных, исходя из схемы\n    const handleFormSubmit = async (e) => {\n        e.preventDefault();\n        // Инициализация объекта данных.\n        const dataToSend = {\n            ...formData,\n            created_by: \"admin\", // Автоподстановка\n            created_at: isEditMode ? undefined : new Date().toISOString() // Для новых записей\n        };\n        // Удаляем технические поля для редактирования\n        if(isEditMode) {\n            delete dataToSend.created_by;\n            delete dataToSend.created_at;\n            dataToSend.updated_by = \"admin\";\n            dataToSend.updated_at = new Date().toISOString();\n        }\n\n        if (modelSchema && modelSchema.data) {\n            modelSchema.data.filter((field) => field.field !== \"id\").forEach((field) => {\n                // В зависимости от типа поля можно выполнить преобразования\n                // Если значение отсутствует, можно задать значение по умолчанию\n                let value = formData[field.field] || \"\";\n                // Если поле связано с внешним ключом, значение должно быть выбрано из options\n                // Здесь можно добавить дополнительную логику, например, проверку, что value входит в options\n                if (field.type.includes(\"BOOLEAN\")) {\n                    value = formData[field.field] === \"on\"; // Преобразуем значение checkbox в boolean\n                }\n\n                // Проверка, если поле является ENUM\n                if (field.isEnum) {\n                    // Находим ключ ENUM по значению\n                    const enumOptions = field.options || [];\n                    const enumKey = enumOptions.find(opt => opt.value === value);\n                    console.log(\"Был выбран вариант: \", enumKey);\n                    if (enumKey) {\n                        value = enumKey.label; // Используем ключ вместо значения\n                    }\n                }\n                console.log(value);\n                dataToSend[field.field] = value;\n            });\n        } else {\n            // Если схема не получена, используем formData как есть (но это крайний случай)\n            dataToSend = { ...formData };\n\n        }\n\n        try {\n            if (isEditMode) {\n                // Отправляем данные для обновления\n                await sendUpdateData(selectedTable, formData.id, dataToSend); // Передаем ID записи для обновления\n            } else {\n                // Отправляем данные для создания\n                await sendSingleData(selectedTable, dataToSend);\n            }\n\n            handleSelectTable(selectedTable);\n            setModalVisible(false);\n        } catch (error) {\n            console.error(\n                `Ошибка при ${isEditMode ? \"редактировании\" : \"добавлении\"} записи:`,\n                error\n            );\n            setError(error.message);\n\n        }\n    };\n\n    // Пример запроса схемы модели (подводные камни: отсутствие схемы на бэкенде, несоответствие типов)\n    const fetchModelSchema = async (modelName) => {\n        try {\n            // Здесь предполагается, что API предоставляет эндпоинт для схемы модели\n            const response = await axios.get(`http://127.0.0.1:5000/api/schema/${modelName}`);\n            // Пример ожидаемого формата: [{ field: \"organisation_name\", type: \"string\", foreignKey: false }, ...]\n            return response.data;\n        } catch (error) {\n            console.error(\"Ошибка получения схемы модели:\", error);\n            return null;\n        }\n    };\n\n    // Рендер списка таблиц\n    const renderTableList = () => (\n        <div className=\"content-container_for_renderTableList\">\n        <h2>Список таблиц</h2>\n        {tableList.length === 0 && <div>Нет данных</div>}\n        <ul className=\"selectors_for_renderTableList\">\n        {tableList.map((table, idx) => {\n            const [displayName, modelName] = Object.entries(table)[0];\n            return (\n                <li key={idx}>\n                <button\n                className=\"custom-button\"\n                onClick={() => handleSelectTable(modelName)}\n                >\n                {displayName}\n                </button>\n                </li>\n            );\n        })}\n        </ul>\n        </div>\n    );\n\n    const renderCellValue = (value, fieldSchema) => {\n        if (typeof value === 'object' && value !== null && fieldSchema?.foreignKey) {\n            const id = value.id || '?';\n            const displayKey = findDisplayKey(value);\n            return displayKey ? `${id}. ${value[displayKey]}` : id;\n        }\n        return value !== null && value !== undefined ? value.toString() : '';\n    };\n\n    const findDisplayKey = (obj) => {\n        const priorityKeys = ['name', 'title', 'organisation_name', 'code_value'];\n        return priorityKeys.find(key => obj.hasOwnProperty(key));\n    };\n\n\n\n\n    // Рендер списка записей выбранной таблицы с CRUD-кнопками\n    const renderTableRecords = () => (\n        <div>\n        <div className=\"content-container\">\n        <button\n        className=\"back-button\"\n        onClick={() => {\n            setSelectedTable(null);\n            setModelSchema(null);\n        }}\n        >\n        Назад к таблицам\n        </button>\n        <h2>Записи таблицы: {selectedTable}</h2>\n        <button\n        className=\"submit-button\"\n        onClick={handleAddButton}\n        >\n        Добавить запись\n        </button>\n        </div>\n        {isLoading ? (\n            <div>Загрузка...</div>\n        ) : tableRecords && tableRecords.length > 0 ? (\n            <table className=\"data-table\">\n            <thead>\n            <tr>\n            {Object.keys(tableRecords[0]).map((key, index) => (\n                <th key={index}>{key}</th>\n            ))}\n            <th>Действия</th>\n            </tr>\n            </thead>\n            <tbody>\n            {tableRecords.map((record) => {\n                return (\n                    <tr key={record.id}>\n                    {Object.keys(record).map((key, idx) => {\n                        const fieldSchema = modelSchema?.data?.find(f => f.field === key);\n                        return (\n                            <td key={idx}>\n                            {renderCellValue(record[key], fieldSchema)}\n                            </td>\n                        );\n                    })}\n                    <td>\n                    <button\n                    className=\"edit-button\"\n                    onClick={() => handleEditButton(record)}\n                    >\n                    Редактировать\n                    </button>\n                    <button\n                    className=\"delete-button\"\n                    onClick={() => handleDeleteRecord(record.id)}\n                    >\n                    Удалить\n                    </button>\n                    </td>\n                    </tr>\n                );\n            })}\n            </tbody>\n            </table>\n        ) : (\n            <div>Записей не найдено</div>\n        )}\n        </div>\n    );\n\n\n    // Функция для удаления записи\n    const handleDeleteRecord = async (recordId) => {\n        try {\n            await sendDeleteData(selectedTable, recordId);\n            handleSelectTable(selectedTable); // Обновить таблицу после удаления\n        } catch (error) {\n            console.error(\"Ошибка удаления записи:\", error);\n        }\n    };\n\n    // Рендер модального окна с динамической формой\n    const renderModal = () => (\n        <Modal onClose={() => {\n            setModalVisible(false);\n            setError(null); // Сбрасываем ошибку при закрытии модального окна\n        }}>\n        <h3>{isEditMode ? \"Редактировать запись\" : \"Добавить запись\"}</h3>\n        {error && <div className=\"error-message\">{error}</div>}\n        <form onSubmit={handleFormSubmit}>\n        {modelSchema && modelSchema.data ? (\n            modelSchema.data.filter((field) => field.field !== \"id\").map((field, index) => (\n                <div key={index} style={{ marginBottom: \"10px\" }}>\n                <label style={{ display: \"block\", marginBottom: \"5px\" }}>\n                {field.field}:\n                </label>\n                {/* Если поле связано с внешним ключом или имеет опции, отрисовываем ForeignKeySelect */}\n                {(field.foreignKey || field.options?.length > 0 || field.isEnum) ? (\n                    <ForeignKeySelect\n                    field={field}\n                    value={formData[field.field] || \"\"}\n                    // onChange={(e) => setFormData({ ...formData, [field.field]: e.target.value })}\n                    onChange={(newValue) => {\n                        setFormData({ ...formData, [field.field]: newValue });\n                    }}\n                    />\n                ) : (\n                    <input\n                    type={getInputType(field.type)}\n                    value={formData[field.field] || \"\"}\n                    onChange={(e) =>\n                        setFormData({ ...formData, [field.field]: e.target.value })\n                    }\n                    />\n                )}\n                </div>\n            ))\n        ) : (\n            <div>Схема модели не получена.</div>\n        )}\n\n        <button type=\"submit\">\n        {isEditMode ? \"Сохранить изменения\" : \"Добавить\"}\n        </button>\n        </form>\n        </Modal>\n    );\n\n    // Функция для определения типа input в зависимости от типа поля\n    const getInputType = (type) => {\n        switch (type) {\n            case \"VARCHAR\":\n            case \"TEXT\":\n            case \"STRING\":\n                return \"text\";\n            case \"DATE\":\n                return \"date\";\n            case \"DATETIME\":\n            case \"TIMESTAMP\":\n                return \"datetime-local\";\n            case \"BOOLEAN\":\n                return \"checkbox\";\n            case \"INTEGER\":\n            case \"BIGINT\":\n            case \"NUMERIC\":\n            case \"DECIMAL\":\n                return \"number\";\n            default:\n                return \"text\";\n        }\n    };\n\n\n    // Пример компонента для внешнего ключа, который выполняет отдельный запрос для получения значений\n    const ForeignKeySelect = ({ field, value, onChange }) => {\n        const [options, setOptions] = useState(field.options || []);\n        const [loading, setLoading] = useState(false);\n\n        useEffect(() => {\n            const fetchOptions = async () => {\n                setLoading(true);\n                try {\n                    if (field.isEnum) {\n                        console.log(\"В ForeignKeySelect попало!\");\n                        // Если это перечисление, получаем варианты через API\n                        const response = await fetchStructureData(\"enum_\"+field.enumType);\n                        console.log(\"Вот что попадет в setOptions: \", response.data)\n                        setOptions(response.data);\n                    } else if (field.foreignKey) {\n                        // Если это внешний ключ, используем существующие опции\n                        setOptions(field.options);\n                    } else {\n                        // Если это не перечисление и не внешний ключ, не делаем запрос\n                        setOptions([]);\n                    }\n                } catch (error) {\n                    console.error(\"Ошибка получения опций для\", field.field, error);\n                } finally {\n                    setLoading(false);\n                }\n            };\n            fetchOptions();\n        }, [field.field, field.enumType]);\n\n        return (\n            <select value={value} onChange={(e) => {onChange(e.target.value)}}>\n            {loading ? (\n                <option>Загрузка...</option>\n            ) : (\n                <>\n                <option value=\"\">Выберите значение</option>\n                {options?.map((opt, idx) => (\n                    <option key={idx} value={opt.value}>\n                    {opt.label}\n                    </option>\n                ))}\n                </>\n            )}\n            </select>\n        );\n    };\n\n    return (\n        <div className=\"admin-panel\">\n        <h1>Админ-панель</h1>\n        {isLoading && <div>Загрузка...</div>}\n        {!selectedTable ? renderTableList() : (\n            <div className=\"table-container\">\n            {renderTableRecords()}\n            </div>\n        )}\n        {modalVisible && renderModal()}\n        </div>\n    );\n};\n\nexport default AdminPanel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}