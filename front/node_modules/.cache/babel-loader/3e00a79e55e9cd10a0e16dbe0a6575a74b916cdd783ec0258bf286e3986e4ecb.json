{"ast":null,"code":"import axios from 'axios';\nimport { fetchSingleTableData } from \"./fetch_records.js\";\nconst API_BASE_URL = 'http://127.0.0.1:5000/api';\n\n/*export const fetchRecords = async () => {\n  const response = await axios.get(`${API_BASE_URL}/records`);\n  return response.data.records;\n};\n\nexport const createRecord = async (data) => {\n  const response = await axios.post(`${API_BASE_URL}/records`, data);\n  return response.data;\n};*/\n\nconst fetchWaterObjects = async () => {\n  try {\n    // 1. Get organization ID\n    const orgData = JSON.parse(localStorage.getItem(\"org\"));\n    const orgId = orgData === null || orgData === void 0 ? void 0 : orgData.id;\n    if (!orgId) throw new Error(\"Organization ID not found in user data\");\n\n    // 2. Fetch all water points\n    const allWaterPoints = await fetchSingleTableData('water_point');\n\n    // 3. Filter water points by organization\n    const orgWaterPoints = allWaterPoints.filter(point => {\n      var _point$organisation_i;\n      return ((_point$organisation_i = point.organisation_id) === null || _point$organisation_i === void 0 ? void 0 : _point$organisation_i.toString()) === orgId.toString();\n    });\n\n    // 4. Collect water_body IDs\n    const waterBodyIds = [...new Set(orgWaterPoints.map(p => p.water_body_id))].filter(id => id !== undefined && id !== null);\n    if (waterBodyIds.length === 0) return [];\n\n    // 5. Fetch all water objects\n    const allWaterObjects = await fetchSingleTableData('water_object_ref');\n\n    // 6. Filter water objects by IDs\n    const filteredWaterObjects = allWaterObjects.filter(obj => waterBodyIds.includes(obj.id));\n    console.log('[WaterObjects] Org ID:', orgId);\n    console.log('[WaterObjects] Found points:', orgWaterPoints.length);\n    console.log('[WaterObjects] Unique water_body IDs:', waterBodyIds);\n    return filteredWaterObjects;\n  } catch (error) {\n    console.error(\"Ошибка при загрузке водных объектов:\", error);\n    throw error; // Пробрасываем ошибку дальше\n  }\n};\n\n// export default fetchWaterObjects;\n\nconst sendQuarterData = async (waterObjectCode, quarter, data) => {\n  const token = localStorage.getItem('jwtToken');\n  try {\n    let send_form = 'send_quarter';\n    console.log(waterObjectCode);\n    const response = await axios.post(`${API_BASE_URL}/send_form`, {\n      waterObjectCode,\n      quarter,\n      data,\n      send_form\n    }, {\n      headers: {\n        'tokenJWTAuthorization': token // Передаем токен в заголовке\n      },\n      withCredentials: true\n    });\n    return response.data; // Возвращаем данные ответа\n  } catch (error) {\n    throw new Error(\"Ошибка при отправке данных: \" + error.message);\n  }\n};\nexport { sendQuarterData, fetchWaterObjects };","map":{"version":3,"names":["axios","fetchSingleTableData","API_BASE_URL","fetchWaterObjects","orgData","JSON","parse","localStorage","getItem","orgId","id","Error","allWaterPoints","orgWaterPoints","filter","point","_point$organisation_i","organisation_id","toString","waterBodyIds","Set","map","p","water_body_id","undefined","length","allWaterObjects","filteredWaterObjects","obj","includes","console","log","error","sendQuarterData","waterObjectCode","quarter","data","token","send_form","response","post","headers","withCredentials","message"],"sources":["/home/noir/projects/diplom/front/src/api/records.js"],"sourcesContent":["import axios from 'axios';\n\nimport {fetchSingleTableData } from \"./fetch_records.js\";\n\nconst API_BASE_URL = 'http://127.0.0.1:5000/api';\n\n/*export const fetchRecords = async () => {\n  const response = await axios.get(`${API_BASE_URL}/records`);\n  return response.data.records;\n};\n\nexport const createRecord = async (data) => {\n  const response = await axios.post(`${API_BASE_URL}/records`, data);\n  return response.data;\n};*/\n\n\nconst fetchWaterObjects = async () => {\n  try {\n    // 1. Get organization ID\n    const orgData = JSON.parse(localStorage.getItem(\"org\"));\n    const orgId = orgData?.id;\n    if (!orgId) throw new Error(\"Organization ID not found in user data\");\n\n    // 2. Fetch all water points\n    const allWaterPoints = await fetchSingleTableData('water_point');\n\n    // 3. Filter water points by organization\n    const orgWaterPoints = allWaterPoints.filter(\n      point => point.organisation_id?.toString() === orgId.toString()\n    );\n\n    // 4. Collect water_body IDs\n    const waterBodyIds = [...new Set(\n      orgWaterPoints.map(p => p.water_body_id)\n    )].filter(id => id !== undefined && id !== null);\n\n    if (waterBodyIds.length === 0) return [];\n\n    // 5. Fetch all water objects\n    const allWaterObjects = await fetchSingleTableData('water_object_ref');\n\n    // 6. Filter water objects by IDs\n    const filteredWaterObjects = allWaterObjects.filter(\n      obj => waterBodyIds.includes(obj.id)\n    );\n\n    console.log('[WaterObjects] Org ID:', orgId);\n    console.log('[WaterObjects] Found points:', orgWaterPoints.length);\n    console.log('[WaterObjects] Unique water_body IDs:', waterBodyIds);\n\n\n    return filteredWaterObjects;\n\n\n  } catch (error) {\n    console.error(\"Ошибка при загрузке водных объектов:\", error);\n    throw error; // Пробрасываем ошибку дальше\n  }\n};\n\n// export default fetchWaterObjects;\n\nconst sendQuarterData = async (waterObjectCode, quarter, data) => {\n  const token = localStorage.getItem('jwtToken');\n\n\n  try {\n    let send_form = 'send_quarter';\n    console.log(waterObjectCode);\n    const response = await axios.post(`${API_BASE_URL}/send_form`, {\n      waterObjectCode,\n      quarter,\n      data,\n      send_form\n    }, {\n      headers: {\n        'tokenJWTAuthorization': token // Передаем токен в заголовке\n      },\n      withCredentials: true\n    });\n\n    return response.data; // Возвращаем данные ответа\n  } catch (error) {\n    throw new Error(\"Ошибка при отправке данных: \" + error.message);\n  }\n};\n\nexport {sendQuarterData, fetchWaterObjects};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAAQC,oBAAoB,QAAQ,oBAAoB;AAExD,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF;IACA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC,CAAC;IACvD,MAAMC,KAAK,GAAGL,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEM,EAAE;IACzB,IAAI,CAACD,KAAK,EAAE,MAAM,IAAIE,KAAK,CAAC,wCAAwC,CAAC;;IAErE;IACA,MAAMC,cAAc,GAAG,MAAMX,oBAAoB,CAAC,aAAa,CAAC;;IAEhE;IACA,MAAMY,cAAc,GAAGD,cAAc,CAACE,MAAM,CAC1CC,KAAK;MAAA,IAAAC,qBAAA;MAAA,OAAI,EAAAA,qBAAA,GAAAD,KAAK,CAACE,eAAe,cAAAD,qBAAA,uBAArBA,qBAAA,CAAuBE,QAAQ,CAAC,CAAC,MAAKT,KAAK,CAACS,QAAQ,CAAC,CAAC;IAAA,CACjE,CAAC;;IAED;IACA,MAAMC,YAAY,GAAG,CAAC,GAAG,IAAIC,GAAG,CAC9BP,cAAc,CAACQ,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,aAAa,CACzC,CAAC,CAAC,CAACT,MAAM,CAACJ,EAAE,IAAIA,EAAE,KAAKc,SAAS,IAAId,EAAE,KAAK,IAAI,CAAC;IAEhD,IAAIS,YAAY,CAACM,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;;IAExC;IACA,MAAMC,eAAe,GAAG,MAAMzB,oBAAoB,CAAC,kBAAkB,CAAC;;IAEtE;IACA,MAAM0B,oBAAoB,GAAGD,eAAe,CAACZ,MAAM,CACjDc,GAAG,IAAIT,YAAY,CAACU,QAAQ,CAACD,GAAG,CAAClB,EAAE,CACrC,CAAC;IAEDoB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEtB,KAAK,CAAC;IAC5CqB,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAElB,cAAc,CAACY,MAAM,CAAC;IAClEK,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEZ,YAAY,CAAC;IAGlE,OAAOQ,oBAAoB;EAG7B,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAED;;AAEA,MAAMC,eAAe,GAAG,MAAAA,CAAOC,eAAe,EAAEC,OAAO,EAAEC,IAAI,KAAK;EAChE,MAAMC,KAAK,GAAG9B,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAG9C,IAAI;IACF,IAAI8B,SAAS,GAAG,cAAc;IAC9BR,OAAO,CAACC,GAAG,CAACG,eAAe,CAAC;IAC5B,MAAMK,QAAQ,GAAG,MAAMvC,KAAK,CAACwC,IAAI,CAAC,GAAGtC,YAAY,YAAY,EAAE;MAC7DgC,eAAe;MACfC,OAAO;MACPC,IAAI;MACJE;IACF,CAAC,EAAE;MACDG,OAAO,EAAE;QACP,uBAAuB,EAAEJ,KAAK,CAAC;MACjC,CAAC;MACDK,eAAe,EAAE;IACnB,CAAC,CAAC;IAEF,OAAOH,QAAQ,CAACH,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACd,MAAM,IAAIrB,KAAK,CAAC,8BAA8B,GAAGqB,KAAK,CAACW,OAAO,CAAC;EACjE;AACF,CAAC;AAED,SAAQV,eAAe,EAAE9B,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}