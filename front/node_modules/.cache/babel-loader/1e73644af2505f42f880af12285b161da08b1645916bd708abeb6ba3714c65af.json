{"ast":null,"code":"var _jsxFileName = \"/home/noir/projects/diplom2/front/src/components/MainNotify.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { getSocket } from \"../socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MainNotify() {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  useEffect(() => {\n    const socket = getSocket();\n    if (!socket) {\n      console.log(\"Socket не инициализирован\");\n      return;\n    }\n\n    // Обработчик входящих уведомлений по сокету\n    const handleNotification = msg => {\n      console.log(\"Получено уведомление через сокет:\", msg);\n      setNotifications(prev => [...prev, msg]);\n    };\n    socket.on(\"notification\", handleNotification);\n\n    // Функция для запроса всех уведомлений через HTTP\n    const fetchAllNotify = async () => {\n      try {\n        const userInfo = JSON.parse(localStorage.getItem(\"user\"));\n        if (!userInfo || !userInfo.username) {\n          console.error(\"Пользователь не найден в localStorage\");\n          return;\n        }\n\n        // GET запрос с username в query параметре\n        const response = await fetch(`http://localhost:5000/fetchallnotify?username=${encodeURIComponent(userInfo.username)}`, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        if (!response.ok) {\n          const errorData = await response.json();\n          console.error(\"Ошибка при загрузке уведомлений:\", errorData);\n          return;\n        }\n\n        // Сервер не возвращает уведомления в теле, а отправляет их через сокет\n        // Поэтому здесь можно ничего не делать с ответом\n      } catch (error) {\n        console.error(\"Ошибка при fetchAllNotify:\", error);\n      }\n    };\n\n    // Вызываем fetchAllNotify один раз при монтировании, чтобы сервер отправил все уведомления через сокет\n    fetchAllNotify();\n\n    // Очистка подписки при размонтировании\n    return () => {\n      socket.off(\"notification\", handleNotification);\n    };\n  }, []);\n  const notifyOrgAdmin = async () => {\n    await fetch(\"http://localhost:5000/notify\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: \"orgadmin\",\n        message: \"Тестовое уведомление\"\n      })\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: notifyOrgAdmin,\n      children: \"\\u0423\\u0432\\u0435\\u0434\\u043E\\u043C\\u0438\\u0442\\u044C \\u043E\\u0440\\u0433\\u0430\\u0434\\u043C\\u0438\\u043D\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u0423\\u0432\\u0435\\u0434\\u043E\\u043C\\u043B\\u0435\\u043D\\u0438\\u044F:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notifications.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: msg\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n_s(MainNotify, \"6gMUc0OfbF4zJu51/S5RmKCczuA=\");\n_c = MainNotify;\nexport default MainNotify;\nvar _c;\n$RefreshReg$(_c, \"MainNotify\");","map":{"version":3,"names":["React","useEffect","useState","getSocket","jsxDEV","_jsxDEV","MainNotify","_s","notifications","setNotifications","socket","console","log","handleNotification","msg","prev","on","fetchAllNotify","userInfo","JSON","parse","localStorage","getItem","username","error","response","fetch","encodeURIComponent","method","headers","ok","errorData","json","off","notifyOrgAdmin","body","stringify","message","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","idx","_c","$RefreshReg$"],"sources":["/home/noir/projects/diplom2/front/src/components/MainNotify.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { getSocket } from \"../socket\";\n\nfunction MainNotify() {\n    const [notifications, setNotifications] = useState([]);\n\n    useEffect(() => {\n        const socket = getSocket();\n\n        if (!socket) {\n            console.log(\"Socket не инициализирован\");\n            return;\n        }\n\n        // Обработчик входящих уведомлений по сокету\n        const handleNotification = (msg) => {\n            console.log(\"Получено уведомление через сокет:\", msg);\n            setNotifications((prev) => [...prev, msg]);\n        };\n\n        socket.on(\"notification\", handleNotification);\n\n        // Функция для запроса всех уведомлений через HTTP\n        const fetchAllNotify = async () => {\n            try {\n                const userInfo = JSON.parse(localStorage.getItem(\"user\"));\n                if (!userInfo || !userInfo.username) {\n                    console.error(\"Пользователь не найден в localStorage\");\n                    return;\n                }\n\n                // GET запрос с username в query параметре\n                const response = await fetch(`http://localhost:5000/fetchallnotify?username=${encodeURIComponent(userInfo.username)}`, {\n                    method: \"GET\",\n                    headers: { \"Content-Type\": \"application/json\" },\n                });\n\n                if (!response.ok) {\n                    const errorData = await response.json();\n                    console.error(\"Ошибка при загрузке уведомлений:\", errorData);\n                    return;\n                }\n\n                // Сервер не возвращает уведомления в теле, а отправляет их через сокет\n                // Поэтому здесь можно ничего не делать с ответом\n\n            } catch (error) {\n                console.error(\"Ошибка при fetchAllNotify:\", error);\n            }\n        };\n\n        // Вызываем fetchAllNotify один раз при монтировании, чтобы сервер отправил все уведомления через сокет\n        fetchAllNotify();\n\n        // Очистка подписки при размонтировании\n        return () => {\n            socket.off(\"notification\", handleNotification);\n        };\n    }, []);\n\n    const notifyOrgAdmin = async () => {\n        await fetch(\"http://localhost:5000/notify\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ username: \"orgadmin\", message: \"Тестовое уведомление\" }),\n        });\n    };\n\n    return (\n        <div>\n        <button onClick={notifyOrgAdmin}>Уведомить оргадмина</button>\n        <h3>Уведомления:</h3>\n        <ul>\n        {notifications.map((msg, idx) => (\n            <li key={idx}>{msg}</li>\n        ))}\n        </ul>\n        </div>\n    );\n}\n\nexport default MainNotify;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}