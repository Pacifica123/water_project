{"ast":null,"code":"var _jsxFileName = \"/home/noir/projects/diplom/front/src/components/AdminPanel.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { fetchStructureData, fetchSingleTableData } from \"../api/fetch_records.js\"; // Функции получения данных\nimport { sendSingleData } from \"../api/add_records.js\"; // Функция для отправки данных\nimport Modal from \"./Modal\"; // Компонент модального окна\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AdminPanel = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  // Основные состояния\n  const [tableList, setTableList] = useState([]);\n  const [selectedTable, setSelectedTable] = useState(null);\n  const [tableRecords, setTableRecords] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [formData, setFormData] = useState({});\n  // Дополнительное состояние для хранения схемы выбранной модели\n  const [modelSchema, setModelSchema] = useState(null);\n  // Состояние для режима редактирования (false - добавление, true - редактирование)\n  const [isEditMode, setIsEditMode] = useState(false);\n\n  // Получение списка таблиц при монтировании компонента\n  useEffect(() => {\n    const getTableList = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetchStructureData(\"allModels\");\n        console.log('Полученные данные:', response.data);\n        // Преобразуем данные в нужный формат\n        const tableListData = response.data.map(([displayName, modelName]) => ({\n          [displayName]: modelName\n        }));\n        console.log('Преобразованные данные:', tableListData);\n        setTableList(tableListData);\n      } catch (error) {\n        console.error(\"Ошибка загрузки списка таблиц:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getTableList();\n  }, []);\n\n  // При выборе таблицы получаем её записи и схему модели (если есть)\n  const handleSelectTable = async modelName => {\n    setSelectedTable(modelName);\n    setIsLoading(true);\n    try {\n      const records = await fetchSingleTableData(modelName);\n      setTableRecords(records);\n      // Здесь можно сделать дополнительный запрос для получения схемы модели, если API предоставляет её\n      // Пример: const schema = await fetchModelSchema(modelName);\n      // Для демонстрации предполагаем, что схема содержит массив объектов { field: \"имя_поля\", type: \"тип\", foreignKey: true/false, options: [...] }\n      // const schema = await fetchModelSchema(modelName); TODO\n      const schema = await fetchStructureData(\"schema_\" + modelName);\n      setModelSchema(schema);\n    } catch (error) {\n      console.error(\"Ошибка загрузки данных для таблицы\", modelName, error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Функция для вызова модального окна в режиме добавления\n  const handleAddButton = () => {\n    setFormData({});\n    setIsEditMode(false);\n    setModalVisible(true);\n  };\n\n  // Функция для вызова модального окна в режиме редактирования\n  const handleEditButton = record => {\n    setFormData(record);\n    setIsEditMode(true);\n    setModalVisible(true);\n  };\n\n  // Обработчик сабмита формы. Здесь динамически собираем объект данных, исходя из схемы\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n    // Инициализация объекта данных. Можно добавить валидацию и проверки типов\n    let dataToSend = {};\n    if (modelSchema && modelSchema.data) {\n      modelSchema.data.filter(field => field.field !== \"id\").forEach(field => {\n        // В зависимости от типа поля можно выполнить преобразования\n        // Если значение отсутствует, можно задать значение по умолчанию\n        let value = formData[field.field] || \"\";\n        // Если поле связано с внешним ключом, значение должно быть выбрано из options\n        // Здесь можно добавить дополнительную логику, например, проверку, что value входит в options\n        if (field.type.includes(\"BOOLEAN\")) {\n          value = formData[field.field] === \"on\"; // Преобразуем значение checkbox в boolean\n        }\n        dataToSend[field.field] = value;\n      });\n    } else {\n      // Если схема не получена, используем formData как есть (но это крайний случай)\n      dataToSend = {\n        ...formData\n      };\n    }\n    try {\n      await sendSingleData(selectedTable, dataToSend);\n      // Перезагрузка записей после успешной операции\n      handleSelectTable(selectedTable);\n      setModalVisible(false);\n    } catch (error) {\n      console.error(`Ошибка при ${isEditMode ? \"редактировании\" : \"добавлении\"} записи:`, error);\n    }\n  };\n\n  // Пример запроса схемы модели (подводные камни: отсутствие схемы на бэкенде, несоответствие типов)\n  const fetchModelSchema = async modelName => {\n    try {\n      // Здесь предполагается, что API предоставляет эндпоинт для схемы модели\n      const response = await axios.get(`http://127.0.0.1:5000/api/schema/${modelName}`);\n      // Пример ожидаемого формата: [{ field: \"organisation_name\", type: \"string\", foreignKey: false }, ...]\n      return response.data;\n    } catch (error) {\n      console.error(\"Ошибка получения схемы модели:\", error);\n      return null;\n    }\n  };\n\n  // Рендер списка таблиц\n  const renderTableList = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0442\\u0430\\u0431\\u043B\\u0438\\u0446\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this), tableList.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u041D\\u0435\\u0442 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 36\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tableList.map((table, idx) => {\n        const [displayName, modelName] = Object.entries(table)[0];\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSelectTable(modelName),\n            children: displayName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 17\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n\n  // Рендер списка записей выбранной таблицы с CRUD-кнопками\n  const renderTableRecords = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setSelectedTable(null);\n        setModelSchema(null);\n      },\n      children: \"\\u041D\\u0430\\u0437\\u0430\\u0434 \\u043A \\u0442\\u0430\\u0431\\u043B\\u0438\\u0446\\u0430\\u043C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"\\u0417\\u0430\\u043F\\u0438\\u0441\\u0438 \\u0442\\u0430\\u0431\\u043B\\u0438\\u0446\\u044B: \", selectedTable]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddButton,\n      children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0437\\u0430\\u043F\\u0438\\u0441\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this) : tableRecords && tableRecords.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [Object.keys(tableRecords[0]).map((key, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: key\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u0414\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u044F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tableRecords.map(record => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [Object.values(record).map((value, idx) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: value === null || value === void 0 ? void 0 : value.toString()\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 21\n          }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleEditButton(record),\n              children: \"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteRecord(record.id),\n              children: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 17\n          }, this)]\n        }, record.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u043F\\u0438\\u0441\\u0435\\u0439 \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n\n  // Функция для удаления записи\n  const handleDeleteRecord = async recordId => {\n    try {\n      // Предполагается, что API поддерживает метод DELETE для удаления записи\n      await axios.delete(`http://127.0.0.1:5000/api/records/${selectedTable}/${recordId}`, {\n        headers: {\n          tokenJWTAuthorization: localStorage.getItem(\"jwtToken\")\n        }\n      });\n      handleSelectTable(selectedTable);\n    } catch (error) {\n      console.error(\"Ошибка удаления записи:\", error);\n    }\n  };\n\n  // Рендер модального окна с динамической формой\n  const renderModal = () => /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: () => setModalVisible(false),\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: isEditMode ? \"Редактировать запись\" : \"Добавить запись\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleFormSubmit,\n      children: [modelSchema && modelSchema.data ? modelSchema.data.filter(field => field.field !== \"id\").map((field, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            display: \"block\",\n            marginBottom: \"5px\"\n          },\n          children: [field.field, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 17\n        }, this), field.foreignKey ? /*#__PURE__*/_jsxDEV(\"select\", {\n          value: formData[field.field] || \"\",\n          onChange: e => setFormData({\n            ...formData,\n            [field.field]: e.target.value\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 21\n          }, this), field.options.map((opt, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: opt.value,\n            children: opt.label\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 25\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n          type: getInputType(field.type),\n          value: formData[field.field] || \"\",\n          onChange: e => setFormData({\n            ...formData,\n            [field.field]: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\u0421\\u0445\\u0435\\u043C\\u0430 \\u043C\\u043E\\u0434\\u0435\\u043B\\u0438 \\u043D\\u0435 \\u043F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u0430.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: isEditMode ? \"Сохранить изменения\" : \"Добавить\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 9\n  }, this);\n\n  // Функция для определения типа input в зависимости от типа поля\n  const getInputType = type => {\n    switch (type) {\n      case \"VARCHAR\":\n      case \"TEXT\":\n        return \"text\";\n      case \"DATE\":\n        return \"date\";\n      case \"DATETIME\":\n        return \"datetime-local\";\n      case \"BOOLEAN\":\n        return \"checkbox\";\n      case \"INTEGER\":\n        return \"number\";\n      default:\n        return \"text\";\n    }\n  };\n\n  // Пример компонента для внешнего ключа, который выполняет отдельный запрос для получения значений\n  const ForeignKeySelect = ({\n    field,\n    value,\n    onChange\n  }) => {\n    _s();\n    const [options, setOptions] = useState([]);\n    const [loading, setLoading] = useState(false);\n    useEffect(() => {\n      const fetchOptions = async () => {\n        setLoading(true);\n        try {\n          // Пример запроса: API должен вернуть список вариантов для данного внешнего ключа\n          const response = await axios.get(`http://127.0.0.1:5000/api/options/${field.field}`);\n          setOptions(response.data);\n        } catch (error) {\n          console.error(\"Ошибка получения опций для\", field.field, error);\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchOptions();\n    }, [field.field]);\n    return /*#__PURE__*/_jsxDEV(\"select\", {\n      value: value,\n      onChange: e => onChange(e.target.value),\n      children: loading ? /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 17\n        }, this), options.map((opt, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: opt.value,\n          children: opt.label\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 21\n        }, this))]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }, this);\n  };\n  _s(ForeignKeySelect, \"lJS1mL3laK6JDXD2aRzPvitQMLw=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0410\\u0434\\u043C\\u0438\\u043D-\\u043F\\u0430\\u043D\\u0435\\u043B\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 9\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 23\n    }, this), !selectedTable ? renderTableList() : renderTableRecords(), modalVisible && renderModal()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 305,\n    columnNumber: 9\n  }, this);\n};\n_s2(AdminPanel, \"I5fyymbDOv7BwXarIfllnZHGzm4=\");\n_c = AdminPanel;\nexport default AdminPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminPanel\");","map":{"version":3,"names":["React","useEffect","useState","fetchStructureData","fetchSingleTableData","sendSingleData","Modal","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminPanel","_s2","_s","$RefreshSig$","tableList","setTableList","selectedTable","setSelectedTable","tableRecords","setTableRecords","isLoading","setIsLoading","modalVisible","setModalVisible","formData","setFormData","modelSchema","setModelSchema","isEditMode","setIsEditMode","getTableList","response","console","log","data","tableListData","map","displayName","modelName","error","handleSelectTable","records","schema","handleAddButton","handleEditButton","record","handleFormSubmit","e","preventDefault","dataToSend","filter","field","forEach","value","type","includes","fetchModelSchema","get","renderTableList","children","fileName","_jsxFileName","lineNumber","columnNumber","length","table","idx","Object","entries","onClick","renderTableRecords","keys","key","index","values","toString","handleDeleteRecord","id","recordId","delete","headers","tokenJWTAuthorization","localStorage","getItem","renderModal","onClose","onSubmit","style","marginBottom","display","foreignKey","onChange","target","options","opt","label","getInputType","ForeignKeySelect","setOptions","loading","setLoading","fetchOptions","className","_c","$RefreshReg$"],"sources":["/home/noir/projects/diplom/front/src/components/AdminPanel.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { fetchStructureData, fetchSingleTableData } from \"../api/fetch_records.js\"; // Функции получения данных\nimport { sendSingleData } from \"../api/add_records.js\"; // Функция для отправки данных\nimport Modal from \"./Modal\"; // Компонент модального окна\nimport axios from \"axios\";\n\nconst AdminPanel = () => {\n    // Основные состояния\n    const [tableList, setTableList] = useState([]);\n    const [selectedTable, setSelectedTable] = useState(null);\n    const [tableRecords, setTableRecords] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [modalVisible, setModalVisible] = useState(false);\n    const [formData, setFormData] = useState({});\n    // Дополнительное состояние для хранения схемы выбранной модели\n    const [modelSchema, setModelSchema] = useState(null);\n    // Состояние для режима редактирования (false - добавление, true - редактирование)\n    const [isEditMode, setIsEditMode] = useState(false);\n\n    // Получение списка таблиц при монтировании компонента\n    useEffect(() => {\n        const getTableList = async () => {\n            setIsLoading(true);\n            try {\n                const response = await fetchStructureData(\"allModels\");\n                console.log('Полученные данные:', response.data);\n                // Преобразуем данные в нужный формат\n                const tableListData = response.data.map(([displayName, modelName]) => ({ [displayName]: modelName }));\n                console.log('Преобразованные данные:', tableListData);\n                setTableList(tableListData);\n            } catch (error) {\n                console.error(\"Ошибка загрузки списка таблиц:\", error);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        getTableList();\n    }, []);\n\n\n\n    // При выборе таблицы получаем её записи и схему модели (если есть)\n    const handleSelectTable = async (modelName) => {\n        setSelectedTable(modelName);\n        setIsLoading(true);\n        try {\n            const records = await fetchSingleTableData(modelName);\n            setTableRecords(records);\n            // Здесь можно сделать дополнительный запрос для получения схемы модели, если API предоставляет её\n            // Пример: const schema = await fetchModelSchema(modelName);\n            // Для демонстрации предполагаем, что схема содержит массив объектов { field: \"имя_поля\", type: \"тип\", foreignKey: true/false, options: [...] }\n            // const schema = await fetchModelSchema(modelName); TODO\n            const schema = await fetchStructureData(\"schema_\"+modelName);\n            setModelSchema(schema);\n        } catch (error) {\n            console.error(\"Ошибка загрузки данных для таблицы\", modelName, error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    // Функция для вызова модального окна в режиме добавления\n    const handleAddButton = () => {\n        setFormData({});\n        setIsEditMode(false);\n        setModalVisible(true);\n    };\n\n    // Функция для вызова модального окна в режиме редактирования\n    const handleEditButton = (record) => {\n        setFormData(record);\n        setIsEditMode(true);\n        setModalVisible(true);\n    };\n\n    // Обработчик сабмита формы. Здесь динамически собираем объект данных, исходя из схемы\n    const handleFormSubmit = async (e) => {\n        e.preventDefault();\n        // Инициализация объекта данных. Можно добавить валидацию и проверки типов\n        let dataToSend = {};\n        if (modelSchema && modelSchema.data) {\n            modelSchema.data.filter((field) => field.field !== \"id\").forEach((field) => {\n                // В зависимости от типа поля можно выполнить преобразования\n                // Если значение отсутствует, можно задать значение по умолчанию\n                let value = formData[field.field] || \"\";\n                // Если поле связано с внешним ключом, значение должно быть выбрано из options\n                // Здесь можно добавить дополнительную логику, например, проверку, что value входит в options\n                if (field.type.includes(\"BOOLEAN\")) {\n                    value = formData[field.field] === \"on\"; // Преобразуем значение checkbox в boolean\n                }\n\n                dataToSend[field.field] = value;\n            });\n        } else {\n            // Если схема не получена, используем formData как есть (но это крайний случай)\n            dataToSend = { ...formData };\n\n        }\n\n        try {\n            await sendSingleData(selectedTable, dataToSend);\n            // Перезагрузка записей после успешной операции\n            handleSelectTable(selectedTable);\n            setModalVisible(false);\n        } catch (error) {\n            console.error(\n                `Ошибка при ${isEditMode ? \"редактировании\" : \"добавлении\"} записи:`,\n                error\n            );\n        }\n    };\n\n    // Пример запроса схемы модели (подводные камни: отсутствие схемы на бэкенде, несоответствие типов)\n    const fetchModelSchema = async (modelName) => {\n        try {\n            // Здесь предполагается, что API предоставляет эндпоинт для схемы модели\n            const response = await axios.get(`http://127.0.0.1:5000/api/schema/${modelName}`);\n            // Пример ожидаемого формата: [{ field: \"organisation_name\", type: \"string\", foreignKey: false }, ...]\n            return response.data;\n        } catch (error) {\n            console.error(\"Ошибка получения схемы модели:\", error);\n            return null;\n        }\n    };\n\n    // Рендер списка таблиц\n    const renderTableList = () => (\n        <div>\n        <h2>Список таблиц</h2>\n        {tableList.length === 0 && <div>Нет данных</div>}\n        <ul>\n        {tableList.map((table, idx) => {\n            const [displayName, modelName] = Object.entries(table)[0];\n            return (\n                <li key={idx}>\n                <button onClick={() => handleSelectTable(modelName)}>\n                {displayName}\n                </button>\n                </li>\n            );\n        })}\n        </ul>\n        </div>\n    );\n\n\n    // Рендер списка записей выбранной таблицы с CRUD-кнопками\n    const renderTableRecords = () => (\n        <div>\n        <button onClick={() => { setSelectedTable(null); setModelSchema(null); }}>Назад к таблицам</button>\n        <h2>Записи таблицы: {selectedTable}</h2>\n        <button onClick={handleAddButton}>Добавить запись</button>\n        {isLoading ? (\n            <div>Загрузка...</div>\n        ) : tableRecords && tableRecords.length > 0 ? (\n            <table>\n            <thead>\n            <tr>\n            {Object.keys(tableRecords[0]).map((key, index) => (\n                <th key={index}>{key}</th>\n            ))}\n            <th>Действия</th>\n            </tr>\n            </thead>\n            <tbody>\n            {tableRecords.map((record) => (\n                <tr key={record.id}>\n                {Object.values(record).map((value, idx) => (\n                    <td key={idx}>{value?.toString()}</td>\n                ))}\n                <td>\n                <button onClick={() => handleEditButton(record)}>Редактировать</button>\n                <button onClick={() => handleDeleteRecord(record.id)}>Удалить</button>\n                </td>\n                </tr>\n            ))}\n            </tbody>\n            </table>\n        ) : (\n            <div>Записей не найдено</div>\n        )}\n        </div>\n    );\n\n    // Функция для удаления записи\n    const handleDeleteRecord = async (recordId) => {\n        try {\n            // Предполагается, что API поддерживает метод DELETE для удаления записи\n            await axios.delete(`http://127.0.0.1:5000/api/records/${selectedTable}/${recordId}`, {\n                headers: {\n                    tokenJWTAuthorization: localStorage.getItem(\"jwtToken\"),\n                },\n            });\n            handleSelectTable(selectedTable);\n        } catch (error) {\n            console.error(\"Ошибка удаления записи:\", error);\n        }\n    };\n\n    // Рендер модального окна с динамической формой\n    const renderModal = () => (\n        <Modal onClose={() => setModalVisible(false)}>\n        <h3>{isEditMode ? \"Редактировать запись\" : \"Добавить запись\"}</h3>\n        <form onSubmit={handleFormSubmit}>\n        {modelSchema && modelSchema.data ? (\n            modelSchema.data.filter((field) => field.field !== \"id\").map((field, index) => (\n\n                <div key={index} style={{ marginBottom: \"10px\" }}>\n                <label style={{ display: \"block\", marginBottom: \"5px\" }}>\n                {field.field}:\n                </label>\n                {/* Если поле связано с внешним ключом, отрисовываем селект */}\n                {field.foreignKey ? (\n                    <select value={formData[field.field] || \"\"} onChange={(e) =>\n                        setFormData({ ...formData, [field.field]: e.target.value })\n                    }>\n                    <option value=\"\">Выберите значение</option>\n                    {field.options.map((opt, idx) => (\n                        <option key={idx} value={opt.value}>\n                        {opt.label}\n                        </option>\n                    ))}\n                    </select>\n                ) : (\n                    <input\n                    type={getInputType(field.type)}\n                    value={formData[field.field] || \"\"}\n                    onChange={(e) =>\n                        setFormData({ ...formData, [field.field]: e.target.value })\n                    }\n                    />\n                )}\n                </div>\n            ))\n        ) : (\n            <div>Схема модели не получена.</div>\n        )}\n        <button type=\"submit\">\n        {isEditMode ? \"Сохранить изменения\" : \"Добавить\"}\n        </button>\n        </form>\n        </Modal>\n    );\n\n    // Функция для определения типа input в зависимости от типа поля\n    const getInputType = (type) => {\n        switch (type) {\n            case \"VARCHAR\":\n            case \"TEXT\":\n                return \"text\";\n            case \"DATE\":\n                return \"date\";\n            case \"DATETIME\":\n                return \"datetime-local\";\n            case \"BOOLEAN\":\n                return \"checkbox\";\n            case \"INTEGER\":\n                return \"number\";\n            default:\n                return \"text\";\n        }\n    };\n\n\n    // Пример компонента для внешнего ключа, который выполняет отдельный запрос для получения значений\n    const ForeignKeySelect = ({ field, value, onChange }) => {\n        const [options, setOptions] = useState([]);\n        const [loading, setLoading] = useState(false);\n\n        useEffect(() => {\n            const fetchOptions = async () => {\n                setLoading(true);\n                try {\n                    // Пример запроса: API должен вернуть список вариантов для данного внешнего ключа\n                    const response = await axios.get(`http://127.0.0.1:5000/api/options/${field.field}`);\n                    setOptions(response.data);\n                } catch (error) {\n                    console.error(\"Ошибка получения опций для\", field.field, error);\n                } finally {\n                    setLoading(false);\n                }\n            };\n            fetchOptions();\n        }, [field.field]);\n\n        return (\n            <select value={value} onChange={(e) => onChange(e.target.value)}>\n            {loading ? (\n                <option>Загрузка...</option>\n            ) : (\n                <>\n                <option value=\"\">Выберите значение</option>\n                {options.map((opt, idx) => (\n                    <option key={idx} value={opt.value}>\n                    {opt.label}\n                    </option>\n                ))}\n                </>\n            )}\n            </select>\n        );\n    };\n\n    return (\n        <div className=\"admin-panel\">\n        <h1>Админ-панель</h1>\n        {isLoading && <div>Загрузка...</div>}\n        {!selectedTable ? renderTableList() : renderTableRecords()}\n        {modalVisible && renderModal()}\n        </div>\n    );\n};\n\nexport default AdminPanel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}